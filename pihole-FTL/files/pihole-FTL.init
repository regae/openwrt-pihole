#!/bin/sh /etc/rc.common
# copied from dnsmasq.init with some modification
# Copyright (C) 2007-2012 OpenWrt.org

START=19
STOP=50

USE_PROCD=1
PROG=/usr/bin/pihole-FTL

ADD_LOCAL_DOMAIN=1

INSTANCE_NAME="ftl"
DHCPSCRIPT="/usr/lib/pihole/dhcp-script.sh"
DHCPSCRIPT_DEPENDS="/usr/share/libubox/jshn.sh /usr/bin/jshn /bin/ubus"
USER="pihole"
GROUP="pihole"

linux_cap()
{
	[ ! -x /usr/sbin/getcap ] && [ ! -x /usr/sbin/setcap ] && return 1

	local CAP="CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_NET_ADMIN+eip"
	local kernel_config="$(zcat /proc/config.gz | awk -F '=' '/^CONFIG_EXT4_FS_SECURITY/ { print $2 }')"

	[ "$kernel_config" != "y" ] && return 1

	if /usr/sbin/getcap $PROG | grep -q cap_net ; then
		return 0
	else
		/usr/sbin/setcap $CAP $PROG
		return $?
	fi

    return 1
}

ftl_start()
{
	local cfg="$1"
	local disabled user_dhcpscript
	local resolvfile resolvdir localuse=0

	# reset list of DOMAINS, DNS servers and EXTRA mounts (for each dnsmasq instance)
	DNS_SERVERS=""
	DOMAIN=""

	# before we can call xappend
	umask u=rwx,g=rx,o=rx
	mkdir -p /var/etc
	mkdir -p /var/hosts
	mkdir -p /var/lib/misc
	[ -d /var/log/pihole ] || mkdir -p /var/log/pihole
	[ -d /var/lib/pihole ] || mkdir -p /var/lib/pihole
	local WEB_LOG=$(uci_get pihole @webserver[0] logfile)
	WEB_LOG=${WEB_LOG:-/var/log/pihole/webserver.log}

	local FTL_LOG=$(uci_get pihole @pihole[0] logfile)
	FTL_LOG=${FTL_LOG:-/var/log/pihole/FTL.log}

	[ -d "$FTL_LOG" ] || mkdir -p $(dirname $FTL_LOG)
	[ ! -e "$FTL_LOG" ] && touch $FTL_LOG
	[ ! -e "$WEB_LOG" ] && touch $WEB_LOG

	chown -R ${USER}:${GROUP} $(dirname $FTL_LOG)
	chown ${USER}:${GROUP} /var/lib/pihole
	chmod 775 /etc/pihole
	chown ${USER}:${GROUP} /etc/pihole
	chown ${USER}:${GROUP} /etc/pihole/*.db
	chmod 664 /etc/pihole/*.db

	local noresolv=$(uci -q get dhcp.@dnsmasq[0].noresolv)
	local localuse=$(uci -q get dhcp.@dnsmasq[0].localuse)

	if [ "$noresolv" != "1" ]; then
		config_get resolvfile "$cfg" resolvfile /tmp/resolv.conf.d/resolv.conf.auto
		[ -n "$resolvfile" ] && [ ! -e "$resolvfile" ] && touch "$resolvfile"
		[ "$resolvfile" = "/tmp/resolv.conf.d/resolv.conf.auto" ] && localuse=1
		resolvdir="$(dirname "$resolvfile")"
	fi

	[ "$localuse" -gt 0 ] && [ -z "$BOOT" ] && {
		rm -f /tmp/resolv.conf
		[ $ADD_LOCAL_DOMAIN -eq 1 ] && [ -n "$DOMAIN" ] && {
			echo "search ${DOMAIN## }" >> /tmp/resolv.conf
		}
		DNS_SERVERS="$DNS_SERVERS 127.0.0.1"
		[ -e /proc/sys/net/ipv6 ] && DNS_SERVERS="$DNS_SERVERS ::1"
		for DNS_SERVER in $DNS_SERVERS ; do
			echo "nameserver $DNS_SERVER" >> /tmp/resolv.conf
		done
	}

	local tls_cert=$(uci -q get pihole.@webserver[0].tls_cert)
	tls_cert="${tls_cert:-/etc/pihole/tls.pem}"
	[ -f "${tls_cert}" ] || {
		[ -f /etc/uhttpd.crt ] && [ -f /etc/uhttpd.key ] && \
			cat /etc/uhttpd.crt > "${tls_cert}"
			cat /etc/uhttpd.key >> "${tls_cert}"
	}

	procd_open_instance "$INSTANCE_NAME"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param file /etc/config/dhcp
	procd_set_param file /etc/config/pihole
	procd_set_param command $PROG
	procd_append_param command -f
#	procd_set_param nice '-10'
	[ -n "$BOOT" ] && [ "$BOOT" = "1" ] && procd_set_param env BOOT="1"
	[ -n "$user_dhcpscript" ] && procd_set_param env USER_DHCPSCRIPT="$user_dhcpscript"
	procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
	procd_set_param term_timeout 60
	if [ -x /sbin/ujail ] && [ -f /etc/capabilities/pihole-FTL.json ]; then
		# /etc/config/pihole to jail_mount_rw fail to do the job, so use config dir
		# /etc/config needs to be writeable for re-reading config without restarting
		# re-readable configs: api_*, privacylevel, blockingmode
		procd_add_jail pihole-FTL ubus log procfs sysfs
		procd_add_jail_mount $DHCPSCRIPT $DHCPSCRIPT_DEPENDS
		procd_add_jail_mount $resolvdir $user_dhcpscript
		procd_add_jail_mount /etc/passwd /etc/group /etc/TZ /etc/hosts /etc/ethers
		procd_add_jail_mount /sbin/ip
		[ -e "$hostsfile" ] && procd_add_jail_mount $hostsfile
		procd_add_jail_mount_rw /dev/shm/ /etc/config/ $FTL_LOG
		procd_add_jail_mount_rw /etc/pihole/ $leasefile
		case "$logfacility" in */*)
			procd_add_jail_mount_rw "$logfacility"
		esac
		procd_set_param capabilities /etc/capabilities/pihole-FTL.json
		procd_set_param user ${USER}
		procd_set_param group ${GROUP}
	elif linux_cap; then
		procd_set_param user ${USER}
		procd_set_param group ${GROUP}
	fi
	procd_close_instance
}

ftl_stop()
{
	local cfg="$1"
	local resolvfile
	local noresolv=$(uci -q get dhcp.@dnsmasq[0].noresolv)
	local localuse=$(uci -q get dhcp.@dnsmasq[0].localuse)

	config_get resolvfile "$cfg" "resolvfile"

	[ "$noresolv" = 0 ] && [ "$resolvfile" = "/tmp/resolv.conf.d/resolv.conf.auto" ] && localuse=1
	[ "$localuse" -gt 0 ] && ln -sf "/tmp/resolv.conf.d/resolv.conf.auto" /tmp/resolv.conf
}

add_interface_trigger()
{
	local interface ignore

	config_get interface "$1" interface
	config_get_bool ignore "$1" ignore 0

	[ -n "$interface" ] && [ $ignore -eq 0 ] && procd_add_interface_trigger "interface.*" "$interface" /etc/init.d/pihole-FTL reload
}

service_triggers()
{
	procd_add_reload_trigger "dhcp" "pihole" "system"

	config_load dhcp
	config_foreach add_interface_trigger dhcp
}

boot()
{
	BOOT=1
	start "$@"
}

start_service() {
	. /lib/functions/network.sh
	config_load dhcp
	ftl_start dnsmasq
}

reload_service() {
	logger -t pihole-FTL "BOOT=$BOOT reload pihole-FTL 1:$1 2:$2 3:$3 SIG:$SIGNAL @:$@"
#	stop "$@"
#	start "$@"
	rc_procd start_service "$@"
	procd_send_signal pihole-FTL "$@"
}

stop_service() {
	config_load dhcp
	ftl_stop dnsmasq
}
