--- a/src/api/dhcp.c
+++ b/src/api/dhcp.c
@@ -13,8 +13,6 @@
 #include "webserver/json_macros.h"
 #include "api.h"
 #include "config/dnsmasq_config.h"
-// rotate_files()
-#include "files.h"
 
 int api_dhcp_leases_GET(struct ftl_conn *api)
 {
--- a/src/api/teleporter.c
+++ b/src/api/teleporter.c
@@ -23,8 +23,6 @@
 #include "database/sqlite3.h"
 // dbquery()
 #include "database/common.h"
-// MAX_ROTATIONS
-#include "files.h"
 //basename()
 #include <libgen.h>
 
@@ -790,24 +788,6 @@ static int process_received_tar_gz(struct ftl_conn *ap
 	// Remove pihole.toml to prevent it from being imported on restart
 	if(remove(GLOBALTOMLPATH) != 0)
 		log_err("Unable to remove file \"%s\": %s", GLOBALTOMLPATH, strerror(errno));
-
-	// Remove all rotated pihole.toml files to avoid automatic config
-	// restore on restart
-	for(unsigned int i = MAX_ROTATIONS; i > 0; i--)
-	{
-		char *fname = strdup(GLOBALTOMLPATH);
-		char *filename = basename(fname);
-		// extra 6 bytes is enough space for up to 999 rotations ("/", ".", "\0", "999")
-		const size_t buflen = strlen(filename) + strlen(BACKUP_DIR) + 6;
-		char *path = calloc(buflen, sizeof(char));
-		snprintf(path, buflen, BACKUP_DIR"/%s.%u", filename, i);
-
-		// Remove file (if it exists)
-		if(remove(path) != 0 && errno != ENOENT)
-			log_err("Unable to remove file \"%s\": %s", path, strerror(errno));
-
-		free(fname);
-	}
 
 	// Free allocated memory
 	free_upload_data(data);
--- a/src/config/config.c
+++ b/src/config/config.c
@@ -1543,24 +1543,18 @@ bool readFTLconf(struct config *conf, const bool rewri
 	getEnvVars();
 
 	// Try to read TOML config file
-	// If we cannot parse /etc/pihole.toml (due to missing or invalid syntax),
-	// we try to read the rotated files in /etc/pihole/config_backup starting at
-	// the most recent one and going back in time until we find a valid config
-	for(unsigned int i = 0; i < MAX_ROTATIONS; i++)
+	if(readFTLtoml(NULL, conf, NULL, rewrite, NULL))
 	{
-		if(readFTLtoml(NULL, conf, NULL, rewrite, NULL, i))
+		// If successful, we write the config file back to disk
+		// to ensure that all options are present and comments
+		// about options deviating from the default are present
+		if(rewrite)
 		{
-			// If successful, we write the config file back to disk
-			// to ensure that all options are present and comments
-			// about options deviating from the default are present
-			if(rewrite)
-			{
-				writeFTLtoml(true);
-				write_dnsmasq_config(conf, false, NULL);
-				write_custom_list();
-			}
-			return true;
+			writeFTLtoml(true);
+			write_dnsmasq_config(conf, false, NULL);
+			write_custom_list();
 		}
+		return true;
 	}
 
 	log_info("No config file nor backup available, using defaults");
@@ -1586,16 +1580,6 @@ bool readFTLconf(struct config *conf, const bool rewri
 	// custom.list
 	read_legacy_custom_hosts_config();
 
-	// When we reach this point but the FTL TOML config file exists, it may
-	// contain errors such as syntax errors, etc. We move it into a
-	// ".broken" location so it can be revisited later
-	if(file_exists(GLOBALTOMLPATH))
-	{
-		const char new_name[] = GLOBALTOMLPATH ".broken";
-		rotate_files(new_name, NULL);
-		rename(GLOBALTOMLPATH, new_name);
-	}
-
 	// Determine default webserver ports if not imported from setupVars.conf
 	if(!(config.webserver.port.f & FLAG_CONF_IMPORTED))
 	{
@@ -1767,7 +17175144,7 @@ void reread_config(void)
 
 	// Read TOML config file
 	bool restart = false;
-	if(readFTLtoml(&config, &conf_copy, NULL, true, &restart, 0))
+	if(readFTLtoml(&config, &conf_copy, NULL, true, &restart))
 	{
 		// Install new configuration
 		log_debug(DEBUG_CONFIG, "Loaded configuration is valid, installing it");
--- a/src/config/toml_helper.c
+++ b/src/config/toml_helper.c
@@ -15,52 +15,34 @@
 #include "datastructure.h"
 // flock(), LOCK_SH
 #include <sys/file.h>
-// rotate_files()
-#include "files.h"
 //set_and_check_password()
 #include "config/password.h"
 // PATH_MAX
 #include <limits.h>
 // escape_json()
 #include "webserver/http-common.h"
 
 // Open the TOML file for reading or writing
-FILE * __attribute((malloc)) __attribute((nonnull(1))) openFTLtoml(const char *mode, const unsigned int version)
+FILE * __attribute((malloc)) openFTLtoml(const char *mode)
 {
-	// This should not happen, install a safeguard anyway to unveil
-	// possible future coding issues early on
-	if(mode[0] == 'w' && version != 0)
-	{
-		log_crit("Writing to version != 0 is not supported in openFTLtoml(%s,%u)",
-		         mode, version);
-		exit(EXIT_FAILURE);
-	}
-
-	// Build filename based on version
+	// Build filename
 	char filename[PATH_MAX] = { 0 };
-	if(version == 0)
-	{
-		// Use global config file
-		strncpy(filename, GLOBALTOMLPATH, sizeof(filename));
 
-		// Append ".tmp" if we are writing
-		if(mode[0] == 'w')
-			strncat(filename, ".tmp", sizeof(filename));
-	}
-	else
-	{
-		// Use rotated config file
-		snprintf(filename, sizeof(filename), BACKUP_DIR"/pihole.toml.%u", version);
-	}
+	// Use global config file
+	strncpy(filename, GLOBALTOMLPATH, sizeof(filename));
 
+	// Append ".tmp" if we are writing
+	if(mode[0] == 'w')
+		strncat(filename, ".tmp", sizeof(filename));
+
 	// Try to open config file
 	FILE *fp = fopen(filename, mode);
 
 	// Return early if opening failed
 	if(!fp)
 	{
-		log_info("Config %sfile %s not available: %s",
-		         version > 0 ? "backup " : "", filename, strerror(errno));
+		log_info("Config file %s not available: %s",
+		         filename, strerror(errno));
 		return NULL;
 	}
 
@@ -74,10 +56,6 @@ FILE * __attribute((malloc)) __attribute((nonnull(1)))
 		errno = _e;
 		return NULL;
 	}
-
-	// Log if we are using a backup file
-	if(version > 0)
-		log_info("Using config backup %s", filename);
 
 	errno = 0;
 	return fp;
--- a/src/config/toml_helper.h
+++ b/src/config/toml_helper.h
@@ -17,7 +17,7 @@ void indentTOML(FILE *fp, const unsigned int indent);
 #include "tomlc99/toml.h"
 
 void indentTOML(FILE *fp, const unsigned int indent);
-FILE *openFTLtoml(const char *mode, const unsigned int version) __attribute((malloc)) __attribute((nonnull(1)));
+FILE *openFTLtoml(const char *mode) __attribute((malloc));
 void closeFTLtoml(FILE *fp);
 void print_comment(FILE *fp, const char *str, const char *intro, const unsigned int width, const unsigned int indent);
 void print_toml_allowed_values(cJSON *allowed_values, FILE *fp, const unsigned int width, const unsigned int indent);
--- a/src/config/toml_reader.c
+++ b/src/config/toml_reader.c
@@ -27,7 +27,7 @@
 #include "config/env.h"
 
 // Private prototypes
-static toml_table_t *parseTOML(const unsigned int version);
+static toml_table_t *parseTOML(void);
 static void reportDebugFlags(void);
 
 // Migrate dns.revServer -> dns.revServers[0]
@@ -102,15 +102,14 @@ bool readFTLtoml(struct config *oldconf, struct config
 }
 
 bool readFTLtoml(struct config *oldconf, struct config *newconf,
-                 toml_table_t *toml, const bool verbose, bool *restart,
-                 const unsigned int version)
+                 toml_table_t *toml, const bool verbose, bool *restart)
 {
 	// Parse lines in the config file if we did not receive a pointer to a TOML
 	// table from an imported Teleporter file
 	bool teleporter = (toml != NULL);
 	if(!teleporter)
 	{
-		toml = parseTOML(version);
+		toml = parseTOML();
 		if(!toml)
 			return false;
 	}
@@ -127,7 +126,7 @@ bool readFTLtoml(struct config *oldconf, struct config
 	set_debug_flags(newconf);
 
 	log_debug(DEBUG_CONFIG, "Reading %s TOML config file",
-	          teleporter ? "teleporter" : version == 0 ? "default" : "backup");
+	          teleporter ? "teleporter" : "default");
 
 	// Read all known config items
 	for(unsigned int i = 0; i < CONFIG_ELEMENTS; i++)
@@ -204,11 +203,11 @@ bool readFTLtoml(struct config *oldconf, struct config
 }
 
 // Parse TOML config file
-static toml_table_t *parseTOML(const unsigned int version)
+static toml_table_t *parseTOML(void)
 {
 	// Try to open default config file. Use fallback if not found
 	FILE *fp;
-	if((fp = openFTLtoml("r", version)) == NULL)
+	if((fp = openFTLtoml("r")) == NULL)
 		return NULL;
 
 	// Parse lines in the config file
@@ -233,7 +232,7 @@ bool getLogFilePathTOML(void)
 {
 	log_debug(DEBUG_CONFIG, "Reading TOML config file: log file path");
 
-	toml_table_t *conf = parseTOML(0);
+	toml_table_t *conf = parseTOML();
 	if(!conf)
 		return false;
 
--- a/src/config/toml_reader.h
+++ b/src/config/toml_reader.h
@@ -14,8 +14,7 @@ bool readFTLtoml(struct config *oldconf, struct config
 #include "tomlc99/toml.h"
 
 bool readFTLtoml(struct config *oldconf, struct config *newconf,
-                 toml_table_t *toml, const bool verbose, bool *restart,
-                 const unsigned int version);
+                 toml_table_t *toml, const bool verbose, bool *restart);
 bool getLogFilePathTOML(void);
 
 #endif //TOML_READER_H
--- a/src/config/toml_writer.c
+++ b/src/config/toml_writer.c
@@ -29,7 +29,7 @@ bool writeFTLtoml(const bool verbose)
 {
 	// Try to open a temporary config file for writing
 	FILE *fp;
-	if((fp = openFTLtoml("w", 0)) == NULL)
+	if((fp = openFTLtoml("w")) == NULL)
 	{
 		log_warn("Cannot write to FTL config file (%s), content not updated", strerror(errno));
 		return false;
@@ -137,9 +137,6 @@ bool writeFTLtoml(const bool verbose)
 	{
 		// Stop watching for changes in the config file
 		watch_config(false);
-
-		// Rotate config file
-		rotate_files(GLOBALTOMLPATH, NULL);
 
 		// Move file
 		if(rename(GLOBALTOMLPATH".tmp", GLOBALTOMLPATH) != 0)
--- a/src/files.c
+++ b/src/files.c
@@ -354,191 +354,6 @@ static char *trim(char *str)
 	return start;
 }
 
-// Credits: https://stackoverflow.com/a/2180157 (modified) for the fallback solution
-static int copy_file(const char *source, const char *destination)
-{
-// Check glibc >= 2.27 for copy_file_range()
-#if __GLIBC__ > 2 ||  (__GLIBC__ == 2 && (__GLIBC_MINOR__ >= 27 ))
-	int fd_in, fd_out;
-	struct stat stat;
-	size_t len;
-	ssize_t ret;
-
-	fd_in = open(source, O_RDONLY);
-	if (fd_in == -1)
-	{
-		log_warn("copy_file(): Failed to open \"%s\" read-only: %s", source, strerror(errno));
-		return -1;
-	}
-
-	if (fstat(fd_in, &stat) == -1) {
-		perror("fstat");
-		exit(EXIT_FAILURE);
-	}
-
-	len = stat.st_size;
-
-	fd_out = open(destination, O_CREAT | O_WRONLY | O_TRUNC, 0644);
-	if (fd_out == -1)
-	{
-		log_warn("copy_file(): Failed to open \"%s\" for writing: %s", destination, strerror(errno));
-		close(fd_in);
-		return -1;
-	}
-
-	do {
-		ret = copy_file_range(fd_in, NULL, fd_out, NULL, len, 0);
-		if (ret == -1) {
-			log_warn("copy_file(): Failed to copy file after %zu of %zu bytes: %s", (size_t)stat.st_size - len, (size_t)stat.st_size, strerror(errno));
-			close(fd_in);
-			close(fd_out);
-			return -1;
-		}
-
-		len -= ret;
-	} while (len > 0 && ret > 0);
-
-	close(fd_in);
-	close(fd_out);
-
-	return 0;
-#else
-	int input, output;
-	if ((input = open(source, O_RDONLY)) == -1)
-	{
-			log_warn("copy_file(): Failed to open \"%s\" read-only: %s", source, strerror(errno));
-			return -1;
-	}
-	if ((output = creat(destination, 0660)) == -1)
-	{
-			log_warn("copy_file(): Failed to open \"%s\" for writing: %s", destination, strerror(errno));
-			close(input);
-			return -1;
-	}
-	// Use sendfile (kernel-space copying as fallback)
-	off_t bytesCopied = 0;
-	struct stat fileinfo = {0};
-	fstat(input, &fileinfo);
-	errno = 0;
-	const int result = sendfile(output, input, &bytesCopied, fileinfo.st_size);
-	if(result == -1)
-			log_warn("copy_file(): Failed to copy \"%s\" to \"%s\": %s", source, destination, strerror(errno));
-	close(input);
-	close(output);
-
-	return result;
-#endif
-}
-
-// Change ownership of file to pihole user
-static bool chown_pihole(const char *path)
-{
-	// Get pihole user's uid and gid
-	struct passwd *pwd = getpwnam("pihole");
-	if(pwd == NULL)
-	{
-		log_warn("chown_pihole(): Failed to get pihole user's uid: %s", strerror(errno));
-		return false;
-	}
-	struct group *grp = getgrnam("pihole");
-	if(grp == NULL)
-	{
-		log_warn("chown_pihole(): Failed to get pihole user's gid: %s", strerror(errno));
-		return false;
-	}
-
-	// Change ownership of file to pihole user
-	if(chown(path, pwd->pw_uid, grp->gr_gid) < 0)
-	{
-		log_warn("chown_pihole(): Failed to change ownership of \"%s\" to %u:%u: %s",
-		         path, pwd->pw_uid, grp->gr_gid, strerror(errno));
-		return false;
-	}
-
-	return true;
-}
-
-// Rotate files in a directory
-void rotate_files(const char *path, char **first_file)
-{
-	// Check if file exists. If not, we don't need to rotate anything here
-	if(!file_exists(path))
-	{
-		log_debug(DEBUG_CONFIG, "rotate_files(): File \"%s\" does not exist, not rotating", path);
-		return;
-	}
-
-	// Try to create backup directory if it does not exist
-	if(!directory_exists(BACKUP_DIR))
-		mkdir(BACKUP_DIR, S_IRWXU | S_IRWXG); // mode 0770
-
-	// Rename all files to one number higher, except for the original file
-	// The original file is *copied* to the backup directory to avoid possible
-	// issues with file permissions if the new config cannot be written after
-	// the old file has already been moved away
-	for(unsigned int i = MAX_ROTATIONS; i > 0; i--)
-	{
-		// Construct old and new paths
-		char *fname = strdup(path);
-		const char *filename = basename(fname);
-		// extra 6 bytes is enough space for up to 999 rotations ("/", ".", "\0", "999")
-		const size_t buflen = strlen(filename) + MAX(strlen(BACKUP_DIR), strlen(path)) + 6;
-		char *old_path = calloc(buflen, sizeof(char));
-		if(i == 1)
-			snprintf(old_path, buflen, "%s", path);
-		else
-			snprintf(old_path, buflen, BACKUP_DIR"/%s.%u", filename, i-1);
-		char *new_path = calloc(buflen, sizeof(char));
-		snprintf(new_path, buflen, BACKUP_DIR"/%s.%u", filename, i);
-		free(fname);
-
-		// If this is the first file, export the path to the caller (if
-		// requested)
-		if(i == 1 && first_file != NULL)
-			*first_file = strdup(new_path);
-
-		if(file_exists(old_path))
-		{
-			// Copy file to backup directory
-			if(i == 1)
-			{
-				// Copy file to backup directory
-				log_debug(DEBUG_CONFIG, "Copying %s -> %s", old_path, new_path);
-				if(copy_file(old_path, new_path) < 0)
-				{
-					log_warn("Rotation %s -(COPY)> %s failed",
-					         old_path, new_path);
-				}
-				else
-				{
-					// Log success if debug is enabled
-					log_debug(DEBUG_CONFIG, "Copied %s -> %s",
-					          old_path, new_path);
-				}
-			}
-			// Rename file to backup directory
-			else if(rename(old_path, new_path) < 0)
-			{
-				log_warn("Rotation %s -(MOVE)> %s failed: %s",
-				         old_path, new_path, strerror(errno));
-			}
-			else
-			{
-				// Log success if debug is enabled
-				log_debug(DEBUG_CONFIG, "Rotated %s -> %s",
-				          old_path, new_path);
-			}
-
-			// Change ownership of file to pihole user
-			chown_pihole(new_path);
-		}
-
-		// Free memory
-		free(old_path);
-		free(new_path);
-	}
-}
-
 // Credits: https://stackoverflow.com/a/55410469
 int parse_line(char *line, char **key, char **value)
 {
--- a/src/files.h
+++ b/src/files.h
@@ -17,9 +17,6 @@
 // SHA256_DIGEST_SIZE
 #include <nettle/sha2.h>
 
-#define MAX_ROTATIONS 15
-#define BACKUP_DIR "/etc/pihole/config_backups"
-
 bool chmod_file(const char *filename, const mode_t mode);
 bool file_exists(const char *filename);
 bool file_readable(const char *filename);
@@ -31,7 +28,6 @@ bool directory_exists(const char *path);
 unsigned int get_path_usage(const char *path, char buffer[64]);
 struct mntent *get_filesystem_details(const char *path);
 bool directory_exists(const char *path);
-void rotate_files(const char *path, char **first_file);
 bool files_different(const char *pathA, const char* pathB, unsigned int from);
 bool sha256sum(const char *path, uint8_t checksum[SHA256_DIGEST_SIZE]);
 
--- a/src/zip/teleporter.c
+++ b/src/zip/teleporter.c
@@ -311,7 +311,7 @@ static const char *test_and_import_pihole_toml(void *p
 	// a temporary config struct (teleporter_config)
 	struct config teleporter_config = { 0 };
 	duplicate_config(&teleporter_config, &config);
-	if(!readFTLtoml(NULL, &teleporter_config, toml, true, NULL, 0))
+	if(!readFTLtoml(NULL, &teleporter_config, toml, true, NULL))
 		return "File etc/pihole/pihole.toml in ZIP archive contains invalid TOML configuration";
 
 	// Test dnsmasq config in the imported configuration
@@ -328,7 +328,6 @@ static const char *test_and_import_pihole_toml(void *p
 
 	// Write new pihole.toml to disk, the dnsmaq config was already written above
 	// Also write the custom list to disk
-	rotate_files(GLOBALTOMLPATH, NULL);
 	writeFTLtoml(true);
 	write_custom_list();
 
@@ -342,9 +341,6 @@ static const char *import_dhcp_leases(void *ptr, size_
 	// When we reach this point, we know that the file is a valid dhcp.leases file.
 	// We can now safely overwrite the current dhcp.leases file with the one from the ZIP archive
 	// Nevertheless, we rotate the current dhcp.leases file to keep a backup of the previous version
-
-	// Rotate current dhcp.leases file
-	rotate_files(DHCPLEASESFILE, NULL);
 
 	// Write new dhcp.leases file to disk
 	FILE *fp = fopen(DHCPLEASESFILE, "w");
