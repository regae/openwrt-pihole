--- a/src/config.c
+++ b/src/config.c
@@ -658,17 +658,6 @@ void read_FTLconf(void)
 		logg("   PIHOLE_PTR: internal PTR generation enabled (pi.hole)");
 	}
 
-	// ADDR2LINE
-	// Should FTL try to call addr2line when generating backtraces?
-	// defaults to: true
-	buffer = parse_FTLconf(fp, "ADDR2LINE");
-	config.addr2line = read_bool(buffer, true);
-
-	if(config.addr2line)
-		logg("   ADDR2LINE: Enabled");
-	else
-		logg("   ADDR2LINE: Disabled");
-
 	// REPLY_WHEN_BUSY
 	// How should FTL handle queries when the gravity database is not available?
 	// defaults to: BLOCK
--- a/src/config.h
+++ b/src/config.h
@@ -48,7 +48,6 @@ typedef struct {
 	bool names_from_netdb :1;
 	bool edns0_ecs :1;
 	bool show_dnssec :1;
-	bool addr2line :1;
 	struct {
 		bool mozilla_canary :1;
 		bool icloud_private_relay :1;
--- a/src/shmem.c
+++ b/src/shmem.c
@@ -22,8 +22,6 @@
 #include <limits.h>
 // gettid
 #include "daemon.h"
-// generate_backtrace()
-#include "signals.h"
 // get_path_usage()
 #include "files.h"
 // log_resource_shortage()
@@ -1044,7 +1042,6 @@ queriesData* _getQuery(int queryID, bool
 	{
 		logg("ERROR: Tried to obtain query pointer without lock in %s() (%s:%i)!",
 		     function, file, line);
-		generate_backtrace();
 		return NULL;
 	}
 
@@ -1066,7 +1063,6 @@ clientsData* _getClient(int clientID, bo
 	{
 		logg("ERROR: Tried to obtain client pointer without lock in %s() (%s:%i)!",
 		     function, file, line);
-		generate_backtrace();
 		return NULL;
 	}
 
@@ -1088,7 +1084,6 @@ domainsData* _getDomain(int domainID, bo
 	{
 		logg("ERROR: Tried to obtain domain pointer without lock in %s() (%s:%i)!",
 		     function, file, line);
-		generate_backtrace();
 		return NULL;
 	}
 
@@ -1110,7 +1105,6 @@ upstreamsData* _getUpstream(int upstream
 	{
 		logg("ERROR: Tried to obtain upstream pointer without lock in %s() (%s:%i)!",
 		     function, file, line);
-		generate_backtrace();
 		return NULL;
 	}
 
@@ -1132,7 +1126,6 @@ DNSCacheData* _getDNSCache(int cacheID,
 	{
 		logg("ERROR: Tried to obtain cache pointer without lock in %s() (%s:%i)!",
 		     function, file, line);
-		generate_backtrace();
 		return NULL;
 	}
 
--- a/src/signals.c
+++ b/src/signals.c
@@ -44,93 +44,6 @@ static char * __attribute__ ((nonnull (1
 	return buffer;
 }
 
-#if defined(__GLIBC__)
-static void print_addr2line(const char *symbol, const void *address, const int j, const void *offset)
-{
-	// Only do this analysis for our own binary (skip trying to analyse libc.so, etc.)
-	if(strstr(symbol, BINARY_NAME) == NULL)
-		return;
-
-	// Find first occurence of '(' or ' ' in the obtaned symbol string and
-	// assume everything before that is the file name. (Don't go beyond the
-	// string terminator \0)
-	int p = 0;
-	while(symbol[p] != '(' && symbol[p] != ' ' && symbol[p] != '\0')
-		p++;
-
-	// Compute address cleaned by binary offset
-	void *addr = (void*)(address-offset);
-
-	// Invoke addr2line command and get result through pipe
-	char addr2line_cmd[256];
-	snprintf(addr2line_cmd, sizeof(addr2line_cmd), "addr2line %p -e %.*s", addr, p, symbol);
-	FILE *addr2line = NULL;
-	char linebuffer[512];
-	if(config.addr2line &&
-	   (addr2line = popen(addr2line_cmd, "r")) != NULL &&
-	   fgets(linebuffer, sizeof(linebuffer), addr2line) != NULL)
-	{
-		char *pos;
-		// Strip possible newline at the end of the addr2line output
-		if ((pos=strchr(linebuffer, '\n')) != NULL)
-			*pos = '\0';
-	}
-	else
-	{
-		snprintf(linebuffer, sizeof(linebuffer), "N/A (%p -> %s)", addr, addr2line_cmd);
-	}
-	// Log result
-	logg("L[%04i]: %s", j, linebuffer);
-
-	// Close pipe
-	if(addr2line != NULL)
-		pclose(addr2line);
-}
-#endif
-
-// Log backtrace
-void generate_backtrace(void)
-{
-// Check GLIBC availability as MUSL does not support live backtrace generation
-#if defined(__GLIBC__)
-	// Try to obtain backtrace. This may not always be helpful, but it is better than nothing
-	void *buffer[255];
-	const int calls = backtrace(buffer, sizeof(buffer)/sizeof(void *));
-	logg("Backtrace:");
-
-	char ** bcktrace = backtrace_symbols(buffer, calls);
-	if(bcktrace == NULL)
-	{
-		logg("Unable to obtain backtrace symbols!");
-		return;
-	}
-
-	// Try to compute binary offset from backtrace_symbols result
-	void *offset = NULL;
-	for(int j = 0; j < calls; j++)
-	{
-		void *p1 = NULL, *p2 = NULL;
-		char *pend = NULL;
-		if((pend = strrchr(bcktrace[j], '(')) != NULL &&
-		   strstr(bcktrace[j], BINARY_NAME) != NULL &&
-		   sscanf(pend, "(+%p) [%p]", &p1, &p2) == 2)
-		   offset = (void*)(p2-p1);
-	}
-
-	for(int j = 0; j < calls; j++)
-	{
-		logg("B[%04i]: %s", j,
-		     bcktrace != NULL ? bcktrace[j] : "---");
-
-		if(bcktrace != NULL)
-			print_addr2line(bcktrace[j], buffer[j], j, offset);
-	}
-	free(bcktrace);
-#else
-	logg("!!! INFO: pihole-FTL has not been compiled with glibc/backtrace support, not generating one !!!");
-#endif
-}
-
 static void __attribute__((noreturn)) signal_handler(int sig, siginfo_t *si, void *unused)
 {
 	logg("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
@@ -236,8 +149,6 @@ static void __attribute__((noreturn)) si
 		}
 	}
 
-	generate_backtrace();
-
 	// Print content of /dev/shm
 	ls_dir("/dev/shm");
 
