--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -61,7 +61,7 @@ set(SQLITE_DEFINES "-DSQLITE_OMIT_LOAD_E
 # -Wl,-z,relro: Read-only segments after relocation
 # -fno-common: Emit globals without explicit initializer from `.bss` to `.data`. This causes GCC to reject multiple definitions of global variables. This is the new default from GCC-10 on.
 if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
-    set(HARDENING_FLAGS "-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro -fno-common")
+    set(HARDENING_FLAGS "-fstack-protector-strong -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -fno-common")
     set(DEBUG_FLAGS "-rdynamic -fno-omit-frame-pointer")
 endif()
 
@@ -266,8 +266,6 @@ set(sources
         shmem.h
         signals.c
         signals.h
-        struct_size.c
-        struct_size.h
         timers.c
         timers.h
         vector.c
--- a/src/api/action.c
+++ b/src/api/action.c
@@ -117,7 +117,7 @@ static int run_and_stream_command(struct
 
 int api_action_gravity(struct ftl_conn *api)
 {
-	return run_and_stream_command(api, "/usr/local/bin/pihole", (const char *const []){ "pihole", "-g", NULL });
+	return run_and_stream_command(api, "/usr/bin/pihole", (const char *const []){ "pihole", "-g", NULL });
 }
 
 int api_action_restartDNS(struct ftl_conn *api)
--- a/src/api/docs/content/specs/config.yaml
+++ b/src/api/docs/content/specs/config.yaml
@@ -742,7 +742,7 @@ components:
             tls:
               cert: "/etc/pihole/tls.pem"
             paths:
-              webroot: "/var/www/html"
+              webroot: "/usr/lib/pihole"
               webhome: "/admin/"
             interface:
               boxed: true
@@ -766,7 +766,7 @@ components:
                 limit: 60.0
                 unit: "C"
           files:
-            pid: "/run/pihole-FTL.pid"
+            pid: "/tmp/run/pihole-FTL.pid"
             database: "/etc/pihole/pihole-FTL.db"
             gravity: "/etc/pihole/gravity.db"
             gravity_tmp: "/tmp"
--- a/src/api/docs/content/specs/teleporter.yaml
+++ b/src/api/docs/content/specs/teleporter.yaml
@@ -149,7 +149,7 @@ components:
     teleporter:
       value:
         processed:
-          - etc/pihole/pihole.toml
+          - tmp/etc/pihole/pihole.toml
           - etc/pihole/gravity.db->group
           - etc/pihole/gravity.db->adlist
           - etc/pihole/gravity.db->adlist_by_group
--- a/src/config/config.c
+++ b/src/config/config.c
@@ -499,7 +499,7 @@ static void initConfig(struct config *co
 	conf->dns.domain.a = cJSON_CreateStringReference("<any valid domain>");
 	conf->dns.domain.t = CONF_STRING;
 	conf->dns.domain.f = FLAG_RESTART_FTL;
-	conf->dns.domain.d.s = (char*)"lan";
+	conf->dns.domain.d.s = (char*)"";
 	conf->dns.domain.c = validate_domain;
 
 	conf->dns.bogusPriv.k = "dns.bogusPriv";
@@ -554,7 +554,7 @@ static void initConfig(struct config *co
 	conf->dns.queryLogging.h = "Log DNS queries and replies to pihole.log";
 	conf->dns.queryLogging.t = CONF_BOOL;
 	conf->dns.queryLogging.f = FLAG_RESTART_FTL;
-	conf->dns.queryLogging.d.b = true;
+	conf->dns.queryLogging.d.b = false;
 	conf->dns.queryLogging.c = validate_stub; // Only type-based checking
 
 	conf->dns.cnameRecords.k = "dns.cnameRecords";
@@ -709,7 +709,7 @@ static void initConfig(struct config *co
 	conf->dhcp.active.h = "Is the embedded DHCP server enabled?";
 	conf->dhcp.active.t = CONF_BOOL;
 	conf->dhcp.active.f = FLAG_RESTART_FTL;
-	conf->dhcp.active.d.b = false;
+	conf->dhcp.active.d.b = true;
 	conf->dhcp.active.c = validate_stub; // Only type-based checking
 
 	conf->dhcp.start.k = "dhcp.start";
@@ -801,7 +801,7 @@ static void initConfig(struct config *co
 	conf->ntp.ipv4.active.h = "Should FTL act as network time protocol (NTP) server (IPv4)?";
 	conf->ntp.ipv4.active.t = CONF_BOOL;
 	conf->ntp.ipv4.active.f = FLAG_RESTART_FTL;
-	conf->ntp.ipv4.active.d.b = true;
+	conf->ntp.ipv4.active.d.b = false;
 	conf->ntp.ipv4.active.c = validate_stub; // Only type-based checking
 
 	conf->ntp.ipv4.address.k = "ntp.ipv4.address";
@@ -816,7 +816,7 @@ static void initConfig(struct config *co
 	conf->ntp.ipv6.active.h = "Should FTL act as network time protocol (NTP) server (IPv6)?";
 	conf->ntp.ipv6.active.t = CONF_BOOL;
 	conf->ntp.ipv6.active.f = FLAG_RESTART_FTL;
-	conf->ntp.ipv6.active.d.b = true;
+	conf->ntp.ipv6.active.d.b = false;
 	conf->ntp.ipv6.active.c = validate_stub; // Only type-based checking
 
 	conf->ntp.ipv6.address.k = "ntp.ipv6.address";
@@ -831,7 +831,7 @@ static void initConfig(struct config *co
 	conf->ntp.sync.active.h = "Should FTL try to synchronize the system time with an upstream NTP server?";
 	conf->ntp.sync.active.t = CONF_BOOL;
 	conf->ntp.sync.active.f = FLAG_RESTART_FTL;
-	conf->ntp.sync.active.d.b = true;
+	conf->ntp.sync.active.d.b = false;
 	conf->ntp.sync.active.c = validate_stub; // Only type-based checking
 
 	conf->ntp.sync.server.k = "ntp.sync.server";
@@ -982,7 +982,7 @@ static void initConfig(struct config *co
 	conf->webserver.port.a = cJSON_CreateStringReference("comma-separated list of <[ip_address:]port>");
 	conf->webserver.port.f = FLAG_RESTART_FTL;
 	conf->webserver.port.t = CONF_STRING;
-	conf->webserver.port.d.s = (char*)"80,[::]:80,443s,[::]:443s";
+	conf->webserver.port.d.s = (char*)"8080";
 	conf->webserver.port.c = validate_stub; // Type-based checking + civetweb syntax checking
 
 	conf->webserver.tls.cert.k = "webserver.tls.cert";
@@ -1011,7 +1011,7 @@ static void initConfig(struct config *co
 	conf->webserver.paths.webroot.a = cJSON_CreateStringReference("<valid path>");
 	conf->webserver.paths.webroot.t = CONF_STRING;
 	conf->webserver.paths.webroot.f = FLAG_RESTART_FTL;
-	conf->webserver.paths.webroot.d.s = (char*)"/var/www/html";
+	conf->webserver.paths.webroot.d.s = (char*)"/usr/lib/pihole";
 	conf->webserver.paths.webroot.c = validate_filepath;
 
 	conf->webserver.paths.webhome.k = "webserver.paths.webhome";
@@ -1168,7 +1168,7 @@ static void initConfig(struct config *co
 	conf->files.pid.a = cJSON_CreateStringReference("<any writable file>");
 	conf->files.pid.t = CONF_STRING;
 	conf->files.pid.f = FLAG_RESTART_FTL;
-	conf->files.pid.d.s = (char*)"/run/pihole-FTL.pid";
+	conf->files.pid.d.s = (char*)"/tmp/run/pihole-FTL.pid";
 	conf->files.pid.c = validate_filepath;
 
 	conf->files.database.k = "files.database";
@@ -1276,7 +1276,7 @@ static void initConfig(struct config *co
 	conf->misc.etc_dnsmasq_d.h = "Should FTL load additional dnsmasq configuration files from /etc/dnsmasq.d/?";
 	conf->misc.etc_dnsmasq_d.t = CONF_BOOL;
 	conf->misc.etc_dnsmasq_d.f = FLAG_RESTART_FTL;
-	conf->misc.etc_dnsmasq_d.d.b = false;
+	conf->misc.etc_dnsmasq_d.d.b = true;
 	conf->misc.etc_dnsmasq_d.c = validate_stub; // Only type-based checking
 
 	conf->misc.dnsmasq_lines.k = "misc.dnsmasq_lines";
--- a/src/config/config.h
+++ b/src/config/config.h
@@ -32,7 +32,7 @@
 // enum web_theme
 #include "api/theme.h"
 
-#define GLOBALTOMLPATH "/etc/pihole/pihole.toml"
+#define GLOBALTOMLPATH "/tmp/etc/pihole/pihole.toml"
 
 // This static string represents an unchanged password
 #define PASSWORD_VALUE "********"
--- a/src/config/dnsmasq_config.c
+++ b/src/config/dnsmasq_config.c
@@ -211,12 +211,12 @@ static void write_config_header(FILE *fp
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "ANY CHANGES MADE TO THIS FILE WILL BE LOST WHEN THE CONFIGURATION CHANGES");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "IF YOU WISH TO CHANGE ANY OF THESE VALUES, CHANGE THEM IN");
-	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "/etc/pihole/pihole.toml");
+	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "/tmp/etc/pihole/pihole.toml");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "and restart pihole-FTL");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "ANY OTHER CHANGES SHOULD BE MADE IN A SEPARATE CONFIG FILE");
-	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "WITHIN /etc/dnsmasq.d/yourname.conf");
-	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "(make sure misc.etc_dnsmasq_d is set to true in /etc/pihole/pihole.toml)");
+	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "WITHIN /tmp/dnsmasq.d/yourname.conf");
+	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "(make sure etc_dnsmasq_d is not false)");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "Last updated: %s", timestring);
 	CONFIG_CENTER(fp, HEADER_WIDTH, "by FTL version %s", get_FTL_version());
@@ -679,12 +679,12 @@ bool __attribute__((const)) write_dnsmas
 	fputs("server=/onion/\n", pihole_conf);
 	fputs("\n", pihole_conf);
 
-	if(directory_exists("/etc/dnsmasq.d") && conf->misc.etc_dnsmasq_d.v.b)
+	if(directory_exists("/tmp/dnsmasq.d") && conf->misc.etc_dnsmasq_d.v.b)
 	{
-		// Load additional user scripts from /etc/dnsmasq.d if the
+		// Load additional user scripts from /tmp/dnsmasq.d if the
 		// directory exists (it may not, e.g., in a container)
 		fputs("# Load additional user scripts\n", pihole_conf);
-		fputs("conf-dir=/etc/dnsmasq.d\n", pihole_conf);
+		fputs("conf-dir=/tmp/dnsmasq.d\n", pihole_conf);
 		fputs("\n", pihole_conf);
 	}
 
--- a/src/config/dnsmasq_config.h
+++ b/src/config/dnsmasq_config.h
@@ -22,13 +22,13 @@ bool read_legacy_cnames_config(void);
 bool read_legacy_custom_hosts_config(void);
 bool write_custom_list(void);
 
-#define DNSMASQ_PH_CONFIG "/etc/pihole/dnsmasq.conf"
-#define DNSMASQ_TEMP_CONF "/etc/pihole/dnsmasq.conf.temp"
+#define DNSMASQ_PH_CONFIG "/tmp/etc/dnsmasq.conf"
+#define DNSMASQ_TEMP_CONF "/tmp/dnsmasq.conf.temp"
 #define DNSMASQ_STATIC_LEASES "/etc/pihole/migration_backup_v6/04-pihole-static-dhcp.conf"
 #define DNSMASQ_CNAMES "/etc/pihole/migration_backup_v6/05-pihole-custom-cname.conf"
-#define DNSMASQ_HOSTSDIR "/etc/pihole/hosts"
-#define DNSMASQ_CUSTOM_LIST DNSMASQ_HOSTSDIR"/custom.list"
-#define DNSMASQ_CUSTOM_LIST_LEGACY "/etc/pihole/custom.list"
-#define DHCPLEASESFILE "/etc/pihole/dhcp.leases"
+#define DNSMASQ_HOSTSDIR "/tmp/hosts"
+#define DNSMASQ_CUSTOM_LIST DNSMASQ_HOSTSDIR"/host_custom"
+#define DNSMASQ_CUSTOM_LIST_LEGACY "/tmp/custom.list"
+#define DHCPLEASESFILE "/tmp/dhcp.leases"
 
 #endif //DNSMASQ_CONFIG_H
--- a/src/dnsmasq/config.h
+++ b/src/dnsmasq/config.h
@@ -31,8 +31,8 @@
 #define FORWARD_TEST 1000 /* try all servers every 1000 queries */
 #define FORWARD_TIME 600 /* or 10 minutes */
 #define UDP_TEST_TIME 60 /* How often to reset our idea of max packet size. */
-#define SERVERS_LOGGED 300 /* Only log this many servers when logging state */
-#define LOCALS_LOGGED 8 /* Only log this many local addresses when logging state */
+#define SERVERS_LOGGED 3 /* Only log this many servers when logging state */
+#define LOCALS_LOGGED 3 /* Only log this many local addresses when logging state */
 #define LEASE_RETRY 60 /* on error, retry writing leasefile after LEASE_RETRY seconds */
 #define CACHESIZ 150 /* default cache size */
 #define TTL_FLOOR_LIMIT 3600 /* don't allow --min-cache-ttl to raise TTL above this under any circumstances */
@@ -235,7 +235,7 @@ RESOLVFILE
 #   if defined(__FreeBSD__)
 #      define CONFFILE "/usr/local/etc/dnsmasq.conf"
 #   else
-#      define CONFFILE "/etc/dnsmasq.conf"
+#      define CONFFILE "/tmp/etc/dnsmasq.conf"
 #   endif
 #endif
 
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -155,6 +155,10 @@ char *getUserName(void)
 	{
 		// If the user is found, we return the username
 		name = strdup(pw->pw_name);
+#if !defined(__GLIBC__)
+		// musl use dynamic allocation???
+		free(pw->pw_name);
+#endif
 	}
 	else
 	{
--- a/src/gc.c
+++ b/src/gc.c
@@ -466,18 +466,6 @@ void runGC(const time_t now, time_t *las
 	DBdeleteoldqueries = true;
 }
 
-static bool check_files_on_same_device(const char *path1, const char *path2)
-{
-	struct stat s1, s2;
-	if(stat(path1, &s1) != 0 || stat(path2, &s2) != 0)
-	{
-		log_warn("check_files_on_same_device(): stat() failed: %s", strerror(errno));
-		return false;
-	}
-
-	return s1.st_dev == s2.st_dev;
-}
-
 void *GC_thread(void *val)
 {
 	// Set thread name
@@ -493,9 +481,6 @@ void *GC_thread(void *val)
 	unsigned int LastLogStorageUsage = 0;
 	unsigned int LastDBStorageUsage = 0;
 
-	bool db_and_log_on_same_dev = false;
-	db_and_log_on_same_dev = check_files_on_same_device(config.files.database.v.s, config.files.log.ftl.v.s);
-
 	// Create inotify watcher for pihole.toml config file
 	watch_config(true);
 
@@ -531,11 +516,12 @@ void *GC_thread(void *val)
 			check_load();
 
 			// Check disk space of database file
-			LastDBStorageUsage = check_space(config.files.database.v.s, LastDBStorageUsage);
+			if(config.files.database.v.s != NULL)
+				LastDBStorageUsage = check_space(config.files.database.v.s, LastDBStorageUsage);
 
 			// Check disk space of log file only if they are not on
 			// the same file system
-			if(!db_and_log_on_same_dev)
+			if(config.files.log.ftl.v.s != NULL)
 				LastLogStorageUsage = check_space(config.files.log.ftl.v.s, LastLogStorageUsage);
 
 			lastResourceCheck = now;
--- a/src/gen_version.cmake
+++ b/src/gen_version.cmake
@@ -12,7 +12,7 @@ if(DEFINED ENV{GIT_BRANCH})
     set(GIT_BRANCH "$ENV{GIT_BRANCH}")
 else()
     execute_process(
-            COMMAND           bash -c "git branch | sed -n 's/^\\* //p'"
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git branch | sed -n 's/^\\* //p' | tail -n 1"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
             OUTPUT_VARIABLE   GIT_BRANCH
             ERROR_QUIET
@@ -24,7 +24,7 @@ if(DEFINED ENV{GIT_HASH})
     set(GIT_HASH "$ENV{GIT_HASH}")
 else()
     execute_process(
-            COMMAND           git --no-pager describe --always --abbrev=8 --dirty
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git --no-pager describe --always --abbrev=8"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
             OUTPUT_VARIABLE   GIT_HASH
             ERROR_QUIET
@@ -36,7 +36,7 @@ if(DEFINED ENV{GIT_VERSION})
     set(GIT_VERSION "$ENV{GIT_VERSION}")
 else()
     execute_process(
-            COMMAND           git --no-pager describe --tags --always --abbrev=8 --dirty
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git --no-pager describe --tags --always --abbrev=8"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
             OUTPUT_VARIABLE   GIT_VERSION
             ERROR_QUIET
@@ -48,7 +48,7 @@ if(DEFINED ENV{GIT_DATE})
     set(GIT_DATE "$ENV{GIT_DATE}")
 else()
     execute_process(
-            COMMAND           bash -c "git --no-pager show --date=short --format=\"%ai\" --name-only | head -n 1"
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git --no-pager show --date=short --format=\"%ai\" --name-only | head -n 1"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
             OUTPUT_VARIABLE   GIT_DATE
             ERROR_QUIET
@@ -60,7 +60,7 @@ if(DEFINED ENV{GIT_TAG})
     set(GIT_TAG "$ENV{GIT_TAG}")
 else()
     execute_process(
-            COMMAND           git describe --tags --abbrev=0
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git describe --tags --abbrev=0"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
             OUTPUT_VARIABLE   GIT_TAG
             ERROR_QUIET
@@ -71,6 +71,8 @@ endif()
 # If CI_ARCH is unset (local compilation), ask uname -m and add locally compiled comment
 if(DEFINED ENV{CI_ARCH})
     set(FTL_ARCH "$ENV{CI_ARCH} (compiled on CI)")
+elseif(DEFINED ENV{FTL_ARCH})
+    set(FTL_ARCH "$ENV{FTL_ARCH}")
 else()
     execute_process(
             COMMAND           uname -m
--- a/src/log.c
+++ b/src/log.c
@@ -271,8 +271,8 @@ void __attribute__ ((format (printf, 3,
 	if((!daemonmode || cli_mode) && print_stdout)
 	{
 		// Only print time/ID string when not in direct user interaction (CLI mode)
-		if(!cli_mode)
-			printf("%s [%s] %s: ", timestring, idstr, prio);
+		//if(!cli_mode)
+		//	printf("%s [%s] %s: ", timestring, idstr, prio);
 		va_start(args, format);
 		vprintf(format, args);
 		va_end(args);
--- a/src/lua/scripts/CMakeLists.txt
+++ b/src/lua/scripts/CMakeLists.txt
@@ -33,3 +33,5 @@ add_dependencies(ftl_lua lua_scripts)
 add_library(lua_scripts OBJECT ${sources})
 target_compile_options(lua_scripts PRIVATE ${EXTRAWARN})
 target_include_directories(lua_scripts PRIVATE ${PROJECT_SOURCE_DIR}/src)
+# Fix for ninja
+set_target_properties(lua_scripts PROPERTIES LINKER_LANGUAGE C)
--- a/src/procps.c
+++ b/src/procps.c
@@ -240,7 +240,7 @@ bool another_FTL(void)
 		log_debug(DEBUG_SHMEM, "PID: %d -> name: %s%s", pid, name, pid == ourselves ? " (us)" : "");
 
 		// Skip our own process
-		if(pid == ourselves)
+		if(pid == ourselves || pid - ourselves == 1)
 			continue;
 
 		// Only process this if this is our own process
--- a/src/zip/miniz/CMakeLists.txt
+++ b/src/zip/miniz/CMakeLists.txt
@@ -15,4 +15,5 @@ set(sources
 
 add_library(miniz OBJECT ${sources})
 target_compile_options(miniz PRIVATE -Wno-padded -Wno-type-limits)
+target_compile_options(miniz PRIVATE -D_LARGEFILE64_SOURCE)
 target_include_directories(miniz PRIVATE ${PROJECT_SOURCE_DIR}/src)
--- a/src/zip/teleporter.c
+++ b/src/zip/teleporter.c
@@ -65,8 +65,8 @@ static const char *ftl_tables[] = {
 
 // List of files to process from a Teleporter ZIP archive
 static const char *extract_files[] = {
-	"etc/pihole/pihole.toml",
-	"etc/pihole/dhcp.leases",
+	"tmp/etc/pihole/pihole.toml",
+	"tmp/etc/pihole/dhcp.leases",
 	"etc/pihole/gravity.db"
 };
 
@@ -293,12 +293,12 @@ static const char *test_and_import_pihol
 {
 	// Check if the file is empty
 	if(size == 0)
-		return "File etc/pihole/pihole.toml in ZIP archive is empty";
+		return "File tmp/etc/pihole/pihole.toml in ZIP archive is empty";
 
 	// Create a memory copy that is null-terminated
 	char *buffer = calloc(size+1, sizeof(char));
 	if(buffer == NULL)
-		return "Failed to allocate memory for null-terminated copy of etc/pihole/pihole.toml in ZIP archive";
+		return "Failed to allocate memory for null-terminated copy of tmp/etc/pihole/pihole.toml in ZIP archive";
 	memcpy(buffer, ptr, size);
 	buffer[size] = '\0';
 
@@ -307,7 +307,7 @@ static const char *test_and_import_pihol
 	if(toml == NULL)
 	{
 		free(buffer);
-		return "File etc/pihole/pihole.toml in ZIP archive is not a valid TOML file";
+		return "File tmp/etc/pihole/pihole.toml in ZIP archive is not a valid TOML file";
 	}
 	free(buffer);
 
@@ -316,12 +316,12 @@ static const char *test_and_import_pihol
 	struct config teleporter_config = { 0 };
 	duplicate_config(&teleporter_config, &config);
 	if(!readFTLtoml(NULL, &teleporter_config, toml, true, NULL, 0))
-		return "File etc/pihole/pihole.toml in ZIP archive contains invalid TOML configuration";
+		return "File tmp/etc/pihole/pihole.toml in ZIP archive contains invalid TOML configuration";
 
 	// Test dnsmasq config in the imported configuration
 	// The dnsmasq configuration will be overwritten if the test succeeds
 	if(!write_dnsmasq_config(&teleporter_config, true, hint))
-		return "File etc/pihole/pihole.toml in ZIP archive contains invalid dnsmasq configuration";
+		return "File tmp/etc/pihole/pihole.toml in ZIP archive contains invalid dnsmasq configuration";
 
 	// When we reach this point, we know that the file is a valid TOML file and contains
 	// a valid configuration for Pi-hole. We can now safely overwrite the current
