--- a/src/api/info.c
+++ b/src/api/info.c
@@ -56,8 +56,6 @@
 // timer_elapsed_msec()
 #include "timers.h"
 
-#define VERSIONS_FILE "/etc/pihole/versions"
-
 int api_info_client(struct ftl_conn *api)
 {
 	cJSON *json = JSON_NEW_OBJECT();
@@ -725,127 +723,35 @@ int api_info_sensors(struct ftl_conn *ap
 
 int get_version_obj(struct ftl_conn *api, cJSON *version)
 {
-	char *line = NULL;
-	size_t len = 0;
-	ssize_t read;
-	char *key, *value;
 	cJSON *core_local = JSON_NEW_OBJECT();
 	cJSON *web_local = JSON_NEW_OBJECT();
 	cJSON *ftl_local = JSON_NEW_OBJECT();
-	cJSON *core_remote = JSON_NEW_OBJECT();
-	cJSON *web_remote = JSON_NEW_OBJECT();
-	cJSON *ftl_remote = JSON_NEW_OBJECT();
-	cJSON *docker = JSON_NEW_OBJECT();
-
-	FILE *fp = fopen(VERSIONS_FILE, "r");
-	if(!fp)
-		return send_json_error(api, 500,
-		                       "internal_error",
-		                       "Failed to read " VERSIONS_FILE,
-		                       NULL);
-
-	// Loop over KEY=VALUE parts in the versions file
-	while((read = getline(&line, &len, fp)) != -1)
-	{
-		if (parse_line(line, &key, &value))
-			continue;
-
-		if(strcmp(key, "CORE_BRANCH") == 0)
-			JSON_COPY_STR_TO_OBJECT(core_local, "branch", value);
-		else if(strcmp(key, "WEB_BRANCH") == 0)
-			JSON_COPY_STR_TO_OBJECT(web_local, "branch", value);
-		// Added below from the running FTL binary itself
-		//else if(strcmp(key, "FTL_BRANCH") == 0)
-		//	JSON_COPY_STR_TO_OBJECT(ftl_local, "branch", value);
-		else if(strcmp(key, "CORE_VERSION") == 0)
-			JSON_COPY_STR_TO_OBJECT(core_local, "version", value);
-		else if(strcmp(key, "WEB_VERSION") == 0)
-			JSON_COPY_STR_TO_OBJECT(web_local, "version", value);
-		// Added below from the running FTL binary itself
-		//else if(strcmp(key, "FTL_VERSION") == 0)
-		//	JSON_COPY_STR_TO_OBJECT(ftl_local, "version", value);
-		else if(strcmp(key, "GITHUB_CORE_VERSION") == 0)
-		{
-			if(strcmp(value, "null") == 0)
-				JSON_ADD_NULL_TO_OBJECT(core_remote, "version");
-			else
-				JSON_COPY_STR_TO_OBJECT(core_remote, "version", value);
-		}
-		else if(strcmp(key, "GITHUB_WEB_VERSION") == 0)
-		{
-			if(strcmp(value, "null") == 0)
-				JSON_ADD_NULL_TO_OBJECT(web_remote, "version");
-			else
-				JSON_COPY_STR_TO_OBJECT(web_remote, "version", value);
-		}
-		else if(strcmp(key, "GITHUB_FTL_VERSION") == 0)
-		{
-			if(strcmp(value, "null") == 0)
-				JSON_ADD_NULL_TO_OBJECT(ftl_remote, "version");
-			else
-				JSON_COPY_STR_TO_OBJECT(ftl_remote, "version", value);
-		}
-		else if(strcmp(key, "CORE_HASH") == 0)
-			JSON_COPY_STR_TO_OBJECT(core_local, "hash", value);
-		else if(strcmp(key, "WEB_HASH") == 0)
-			JSON_COPY_STR_TO_OBJECT(web_local, "hash", value);
-		else if(strcmp(key, "FTL_HASH") == 0)
-			JSON_COPY_STR_TO_OBJECT(ftl_local, "hash", value);
-		else if(strcmp(key, "GITHUB_CORE_HASH") == 0)
-			JSON_COPY_STR_TO_OBJECT(core_remote, "hash", value);
-		else if(strcmp(key, "GITHUB_WEB_HASH") == 0)
-			JSON_COPY_STR_TO_OBJECT(web_remote, "hash", value);
-		else if(strcmp(key, "GITHUB_FTL_HASH") == 0)
-			JSON_COPY_STR_TO_OBJECT(ftl_remote, "hash", value);
-		else if(strcmp(key, "DOCKER_VERSION") == 0)
-			JSON_COPY_STR_TO_OBJECT(docker, "local", value);
-		else if(strcmp(key, "GITHUB_DOCKER_VERSION") == 0)
-			JSON_COPY_STR_TO_OBJECT(docker, "remote", value);
-	}
-
-	// Free allocated memory and release file pointer
-	free(line);
-	fclose(fp);
-
-	// Add remaining properties to ftl object
-	JSON_REF_STR_IN_OBJECT(ftl_local, "branch", GIT_BRANCH);
-	JSON_REF_STR_IN_OBJECT(ftl_local, "version", get_FTL_version());
-	JSON_REF_STR_IN_OBJECT(ftl_local, "date", GIT_DATE);
+
+	JSON_REF_STR_IN_OBJECT(ftl_local, "branch", FTL_BRANCH);
+	JSON_REF_STR_IN_OBJECT(ftl_local, "version", FTL_VERSION);
+	JSON_REF_STR_IN_OBJECT(ftl_local, "date", FTL_DATE);
+	JSON_REF_STR_IN_OBJECT(ftl_local, "hash", FTL_HASH);
+	JSON_REF_STR_IN_OBJECT(web_local, "branch", FTL_BRANCH);
+	JSON_REF_STR_IN_OBJECT(web_local, "version", WEB_VERSION);
+	JSON_REF_STR_IN_OBJECT(web_local, "hash", WEB_HASH);
+	JSON_REF_STR_IN_OBJECT(core_local, "branch", FTL_BRANCH);
+	JSON_REF_STR_IN_OBJECT(core_local, "version", CORE_VERSION);
+	JSON_REF_STR_IN_OBJECT(core_local, "hash", CORE_HASH);
 
-	cJSON *core = JSON_NEW_OBJECT();
 	JSON_ADD_NULL_IF_NOT_EXISTS(core_local, "branch");
 	JSON_ADD_NULL_IF_NOT_EXISTS(core_local, "version");
 	JSON_ADD_NULL_IF_NOT_EXISTS(core_local, "hash");
-	JSON_ADD_ITEM_TO_OBJECT(core, "local", core_local);
-	JSON_ADD_NULL_IF_NOT_EXISTS(core_remote, "version");
-	JSON_ADD_NULL_IF_NOT_EXISTS(core_remote, "hash");
-	JSON_ADD_ITEM_TO_OBJECT(core, "remote", core_remote);
-	JSON_ADD_ITEM_TO_OBJECT(version, "core", core);
-
-	cJSON *web = JSON_NEW_OBJECT();
+	JSON_ADD_ITEM_TO_OBJECT(version, "core", core_local);
+
 	JSON_ADD_NULL_IF_NOT_EXISTS(web_local, "branch");
 	JSON_ADD_NULL_IF_NOT_EXISTS(web_local, "version");
 	JSON_ADD_NULL_IF_NOT_EXISTS(web_local, "hash");
-	JSON_ADD_ITEM_TO_OBJECT(web, "local", web_local);
-	JSON_ADD_NULL_IF_NOT_EXISTS(web_remote, "version");
-	JSON_ADD_NULL_IF_NOT_EXISTS(web_remote, "hash");
-	JSON_ADD_ITEM_TO_OBJECT(web, "remote", web_remote);
-	JSON_ADD_ITEM_TO_OBJECT(version, "web", web);
-
-	cJSON *ftl = JSON_NEW_OBJECT();
-	JSON_ADD_ITEM_TO_OBJECT(ftl, "local", ftl_local);
+	JSON_ADD_ITEM_TO_OBJECT(version, "web", web_local);
+
 	JSON_ADD_NULL_IF_NOT_EXISTS(ftl_local, "branch");
 	JSON_ADD_NULL_IF_NOT_EXISTS(ftl_local, "version");
 	JSON_ADD_NULL_IF_NOT_EXISTS(ftl_local, "hash");
-	JSON_ADD_ITEM_TO_OBJECT(ftl, "remote", ftl_remote);
-	JSON_ADD_NULL_IF_NOT_EXISTS(ftl_remote, "version");
-	JSON_ADD_NULL_IF_NOT_EXISTS(ftl_remote, "hash");
-	JSON_ADD_ITEM_TO_OBJECT(version, "ftl", ftl);
-
-	// Add nulls to docker if we didn't find any version
-	JSON_ADD_NULL_IF_NOT_EXISTS(docker, "local");
-	JSON_ADD_NULL_IF_NOT_EXISTS(docker, "remote");
-	JSON_ADD_ITEM_TO_OBJECT(version, "docker", docker);
+	JSON_ADD_ITEM_TO_OBJECT(version, "ftl", ftl_local);
 
 	return 0;
 }
--- a/src/args.c
+++ b/src/args.c
@@ -766,7 +766,7 @@ void parse_args(int argc, char* argv[])
 		   strcmp(argv[i], "version") == 0 ||
 		   strcmp(argv[i], "--version") == 0)
 		{
-			printf("%s\n", get_FTL_version());
+			printf("%s\n", FTL_VERSION);
 			exit(EXIT_SUCCESS);
 		}
 
@@ -783,9 +783,9 @@ void parse_args(int argc, char* argv[])
 			printf("****************************** %s%sFTL%s **********************************\n",
 			       yellow, bold, normal);
 			printf("Version:         %s%s%s%s\n",
-			       green, bold, get_FTL_version(), normal);
-			printf("Branch:          " GIT_BRANCH "\n");
-			printf("Commit:          " GIT_HASH " (" GIT_DATE ")\n");
+			       green, bold, FTL_VERSION, normal);
+			printf("Branch:          " FTL_BRANCH "\n");
+			printf("Commit:          " FTL_TAG " (" FTL_DATE ")\n");
 			printf("Architecture:    " FTL_ARCH "\n");
 			printf("Compiler:        " FTL_CC "\n");
 #if defined(__GLIBC__) && defined(__GLIBC_MINOR__)
@@ -894,20 +894,20 @@ void parse_args(int argc, char* argv[])
 		if(strcmp(argv[i], "-t") == 0 ||
 		   strcmp(argv[i], "tag") == 0)
 		{
-			printf("%s\n",GIT_TAG);
+			printf("%s\n",FTL_TAG);
 			exit(EXIT_SUCCESS);
 		}
 
 		if(strcmp(argv[i], "-b") == 0 ||
 		   strcmp(argv[i], "branch") == 0)
 		{
-			printf("%s\n",GIT_BRANCH);
+			printf("%s\n",FTL_BRANCH);
 			exit(EXIT_SUCCESS);
 		}
 
 		if(strcmp(argv[i], "--hash") == 0)
 		{
-			printf("%s\n",GIT_HASH);
+			printf("%s-%s\n", FTL_HASH, FTL_TAG);
 			exit(EXIT_SUCCESS);
 		}
 
@@ -953,7 +953,7 @@ void parse_args(int argc, char* argv[])
 			const char *yellow = cli_color(COL_YELLOW);
 			const char *purple = cli_color(COL_PURPLE);
 
-			printf("%sThe Pi-hole FTL engine - %s%s\n\n", bold, get_FTL_version(), normal);
+			printf("%sThe Pi-hole FTL engine - %s%s\n\n", bold, FTL_VERSION, normal);
 			printf("Typically, pihole-FTL runs as a system service and is controlled\n");
 			printf("by %ssudo service pihole-FTL %s<action>%s where %s<action>%s is one out\n", green, purple, normal, purple, normal);
 			printf("of %sstart%s, %sstop%s, or %srestart%s.\n\n", green, normal, green, normal, green, normal);
--- a/src/config/CMakeLists.txt
+++ b/src/config/CMakeLists.txt
@@ -38,3 +38,6 @@
 target_compile_options(config PRIVATE ${EXTRAWARN})
 target_include_directories(config PRIVATE ${PROJECT_SOURCE_DIR}/src)
 add_subdirectory(tomlc99)
+if(NOT EXISTS "${PROJECT_SOURCE_DIR}/src/version.h")
+    add_dependencies(config gen_version)
+endif()
--- a/src/config/dnsmasq_config.c
+++ b/src/config/dnsmasq_config.c
@@ -12,6 +12,7 @@
 #include "dnsmasq_config.h"
 // logging routines
 #include "log.h"
+#include "version.h"
 // get_blocking_mode_str()
 #include "datastructure.h"
 // flock(), LOCK_SH
@@ -213,7 +214,7 @@ static void write_config_header(FILE *fp
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "(make sure misc.etc_dnsmasq_d is set to true in /etc/pihole/pihole.toml)");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "Last updated: %s", timestring);
-	CONFIG_CENTER(fp, HEADER_WIDTH, "by FTL version %s", get_FTL_version());
+	CONFIG_CENTER(fp, HEADER_WIDTH, "by FTL version %s", FTL_VERSION);
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "################################################################################");
 }
--- a/src/config/toml_writer.c
+++ b/src/config/toml_writer.c
@@ -10,8 +10,9 @@
 
 #include "FTL.h"
 #include "config.h"
-// get_timestr(), get_FTL_version())
+// get_timestr()
 #include "log.h"
+#include "version.h"
 #include "tomlc99/toml.h"
 #include "toml_writer.h"
 #include "toml_helper.h"
@@ -49,7 +50,7 @@ bool writeFTLtoml(const bool verbose)
 	}
 
 	// Write header
-	fprintf(fp, "# Pi-hole configuration file (%s)\n", get_FTL_version());
+	fprintf(fp, "# Pi-hole configuration file (%s)\n", FTL_VERSION);
 	fputs("# Encoding: UTF-8\n", fp);
 	fputs("# This file is managed by pihole-FTL\n", fp);
 	char timestring[TIMESTR_SIZE];
--- a/src/dnsmasq/CMakeLists.txt
+++ b/src/dnsmasq/CMakeLists.txt
@@ -71,3 +71,6 @@ target_compile_definitions(dnsmasq PRIVA
     target_compile_options(dnsmasq PRIVATE -Wno-gnu-variable-sized-type-not-at-end -Wno-sign-compare -Wno-deprecated-non-prototype)
 endif()
 target_include_directories(dnsmasq PRIVATE ${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/src/lua)
+if(NOT EXISTS "${PROJECT_SOURCE_DIR}/src/version.h")
+    add_dependencies(dnsmasq gen_version)
+endif()
--- a/src/dnsmasq/option.c
+++ b/src/dnsmasq/option.c
@@ -20,7 +20,7 @@
 #include <setjmp.h>
 
 /* Pi-hole modification */
-#include "log.h"
+#include "version.h"
 /************************/
 
 static volatile int mem_recover = 0;
@@ -6014,7 +6014,7 @@ void read_opts(int argc, char **argv, ch
 #endif
       add_txt("servers.bind", NULL, TXT_STAT_SERVERS);
       /* Pi-hole modification */
-      add_txt("version.ftl", (char*)get_FTL_version(), 0 );
+      add_txt("version.ftl", FTL_VERSION, 0 );
       add_txt("api.ftl", NULL, TXT_API_DOMAIN);
       add_txt("domain.api.ftl", NULL, TXT_API_DOMAIN);
       add_txt("local.api.ftl", NULL, TXT_API_LOCAL);
--- a/src/gen_version.cmake
+++ b/src/gen_version.cmake
@@ -8,68 +8,107 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-if(DEFINED ENV{GIT_BRANCH})
-    set(GIT_BRANCH "$ENV{GIT_BRANCH}")
+if(DEFINED ENV{FTL_BRANCH})
+    set(FTL_BRANCH "$ENV{FTL_BRANCH}")
 else()
     execute_process(
-            COMMAND           bash -c "git branch | sed -n 's/^\\* //p'"
+    		COMMAND           bash -c "git --git-dir=$TOPDIR/.git branch | awk '/^\\*/ {branch=\$2} /^\\*/ && branch == \"master\" && branch !~ /openwrt/ {print \"openwrt-\" branch} /^\\*/ && branch != \"master\" {print branch} /^\\*/ && branch ~ /openwrt/ {print branch}'"
+    		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+    		OUTPUT_VARIABLE   FTL_BRANCH
+    		OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+endif()
+
+if(DEFINED ENV{FTL_HASH})
+    set(FTL_HASH "$ENV{FTL_HASH}")
+else()
+	execute_process(
+	        COMMAND           bash -c "git --git-dir=$TOPDIR/.git log -n 1 --format=\"%h\""
+	        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+	        OUTPUT_VARIABLE   FTL_HASH
+	        OUTPUT_STRIP_TRAILING_WHITESPACE
+	)
+endif()
+
+if(DEFINED ENV{CORE_VERSION})
+    set(CORE_VERSION "$ENV{CORE_VERSION}")
+else()
+    execute_process(
+            COMMAND bash -c "grep '^PKG_VERSION' $CURDIR/../pihole/Makefile | cut -d '=' -f 2 | cut -d '-' -f 1"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-            OUTPUT_VARIABLE   GIT_BRANCH
-            ERROR_QUIET
+            OUTPUT_VARIABLE CORE_VER
+            OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+
+    execute_process(
+            COMMAND bash -c "grep '^PKG_SOURCE_VERSION' $CURDIR/../pihole/Makefile | cut -d '=' -f 2 | cut -c 1-8"
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            OUTPUT_VARIABLE CORE_SOURCE_VERSION
+            OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+
+    set(CORE_VERSION "${CORE_VER}-${CORE_SOURCE_VERSION}")
+endif()
+
+if(DEFINED ENV{WEB_VERSION})
+    set(WEB_VERSION "$ENV{WEB_VERSION}")
+else()
+    execute_process(
+            COMMAND bash -c "grep '^PKG_VERSION' $CURDIR/../pihole-web/Makefile | cut -d '=' -f 2 | cut -d '-' -f 1"
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            OUTPUT_VARIABLE WEB_VERSION
+            OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+
+    execute_process(
+            COMMAND bash -c "grep '^PKG_SOURCE_VERSION' $CURDIR/../pihole-web/Makefile | cut -d '=' -f 2 | cut -c 1-8"
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            OUTPUT_VARIABLE WEB_SOURCE_VERSION
+            OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+
+    set(WEB_VERSION "${WEB_VERSION}-${WEB_SOURCE_VERSION}")
+endif()
+
+if(DEFINED ENV{FTL_VERSION})
+    set(FTL_VERSION "$ENV{FTL_VERSION}")
+else()
+    set(FTL_VERSION "Unknown")
+endif()
+
+if(DEFINED ENV{FTL_DATE})
+    set(FTL_DATE "$ENV{FTL_DATE}")
+else()
+    execute_process(
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git --no-pager show --date=short --format=\"%ai\" --name-only | head -n 1"
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            OUTPUT_VARIABLE   FTL_DATE
             OUTPUT_STRIP_TRAILING_WHITESPACE
     )
 endif()
 
-if(DEFINED ENV{GIT_HASH})
-    set(GIT_HASH "$ENV{GIT_HASH}")
+if(DEFINED ENV{FTL_TAG})
+    set(FTL_TAG "$ENV{FTL_TAG}")
 else()
     execute_process(
-            COMMAND           git --no-pager describe --always --abbrev=8 --dirty
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git rev-list ee53a240ac902dc83209008a2671e7fdcf55957a..HEAD | wc -l | awk '{print \"r\"$1}'"
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-            OUTPUT_VARIABLE   GIT_HASH
-            ERROR_QUIET
+            OUTPUT_VARIABLE   REV
             OUTPUT_STRIP_TRAILING_WHITESPACE
     )
-endif()
-
-if(DEFINED ENV{GIT_VERSION})
-    set(GIT_VERSION "$ENV{GIT_VERSION}")
-else()
     execute_process(
-            COMMAND           git --no-pager describe --tags --always --abbrev=8 --dirty
+            COMMAND           bash -c "git --git-dir=$TOPDIR/.git log -n 1 --format=\"%h\""
             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-            OUTPUT_VARIABLE   GIT_VERSION
-            ERROR_QUIET
+            OUTPUT_VARIABLE   REV_COMM
             OUTPUT_STRIP_TRAILING_WHITESPACE
     )
-endif()
-
-if(DEFINED ENV{GIT_DATE})
-    set(GIT_DATE "$ENV{GIT_DATE}")
-else()
-    execute_process(
-            COMMAND           bash -c "git --no-pager show --date=short --format=\"%ai\" --name-only | head -n 1"
-            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-            OUTPUT_VARIABLE   GIT_DATE
-            ERROR_QUIET
-            OUTPUT_STRIP_TRAILING_WHITESPACE
-    )
-endif()
-
-if(DEFINED ENV{GIT_TAG})
-    set(GIT_TAG "$ENV{GIT_TAG}")
-else()
-    execute_process(
-            COMMAND           git describe --tags --abbrev=0
-            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-            OUTPUT_VARIABLE   GIT_TAG
-            ERROR_QUIET
-            OUTPUT_STRIP_TRAILING_WHITESPACE
-    )
+    set(FTL_TAG "${REV}-${REV_COMM}")
 endif()
 
 # If CI_ARCH is unset (local compilation), ask uname -m and add locally compiled comment
-if(DEFINED ENV{CI_ARCH})
+if(DEFINED ENV{FTL_ARCH})
+    set(FTL_ARCH "$ENV{FTL_ARCH}")
+elseif(DEFINED ENV{CI_ARCH})
     set(FTL_ARCH "$ENV{CI_ARCH} (compiled on CI)")
 else()
     execute_process(
@@ -90,12 +129,14 @@
 )
 
 message("Building Pi-hole FTL daemon")
-message("   - Branch: ${GIT_BRANCH}")
+message("   - Branch: ${FTL_BRANCH}")
 message("   - Architecture: ${FTL_ARCH}")
-message("   - Version: ${GIT_VERSION}")
-message("   - Tag: ${GIT_TAG}")
-message("   - Hash: ${GIT_HASH}")
-message("   - Commit date: ${GIT_DATE}")
+message("   - FTL Version: ${FTL_VERSION}")
+message("   - Core Version: ${CORE_VERSION}")
+message("   - Web Version: ${WEB_VERSION}")
+message("   - Tag: ${FTL_TAG}")
+message("   - Hash: ${FTL_HASH}")
+message("   - Commit date: ${FTL_DATE}")
 
 # configure the version file, but output to a temporary location
 configure_file(
--- a/src/log.c
+++ b/src/log.c
@@ -496,10 +496,10 @@ void log_counter_info(void)
 
 void log_FTL_version(const bool crashreport)
 {
-	log_info("FTL branch: %s", GIT_BRANCH);
-	log_info("FTL version: %s", get_FTL_version());
-	log_info("FTL commit: %s", GIT_HASH);
-	log_info("FTL date: %s", GIT_DATE);
+	log_info("FTL branch: %s", FTL_BRANCH);
+	log_info("FTL version: %s", FTL_VERSION);
+	log_info("FTL commit: %s", FTL_TAG);
+	log_info("FTL date: %s", FTL_DATE);
 	if(crashreport)
 	{
 		char *username_now = getUserName();
@@ -511,38 +511,6 @@ void log_FTL_version(const bool crashrep
 	log_info("Compiled for %s using %s", FTL_ARCH, FTL_CC);
 }
 
-static char *FTLversion = NULL;
-const char __attribute__ ((malloc)) *get_FTL_version(void)
-{
-	// Obtain FTL version if not already determined
-	if(FTLversion == NULL)
-	{
-		if(strlen(GIT_TAG) > 1 )
-		{
-			if (strlen(GIT_VERSION) > 1)
-			{
-				// Copy version string if this is a tagged release
-				FTLversion = strdup(GIT_VERSION);
-			}
-
-		}
-		else if(strlen(GIT_HASH) > 0)
-		{
-			// Build special version string when there is a hash
-			FTLversion = calloc(13, sizeof(char));
-			// Build version by appending 7 characters of the hash to "vDev-"
-			snprintf(FTLversion, 13, "vDev-%.7s", GIT_HASH);
-		}
-		else
-		{
-			// Fallback for tarball build, etc. without any GIT subsystem
-			FTLversion = strdup("UNKNOWN (not a GIT build)");
-		}
-	}
-
-	return FTLversion;
-}
-
 const char __attribute__ ((const)) *get_ordinal_suffix(unsigned int number)
 {
 	if((number % 100) > 9 && (number % 100) < 20)
@@ -682,7 +650,7 @@ const char * __attribute__ ((pure)) shor
 
 void print_FTL_version(void)
 {
-    printf("Pi-hole FTL %s\n", get_FTL_version());
+    printf("Pi-hole FTL %s\n", FTL_VERSION);
 }
 
 // Skip leading string if found
--- a/src/log.h
+++ b/src/log.h
@@ -48,7 +48,6 @@ void format_memory_size(char prefix[2],
 void format_memory_size(char prefix[2], const uint64_t bytes, double * const formatted);
 void format_time(char buffer[42], unsigned long seconds, double milliseconds);
 unsigned int get_year(const time_t timein);
-const char *get_FTL_version(void);
 void log_FTL_version(bool crashreport);
 double double_time(void);
 void get_timestr(char timestring[TIMESTR_SIZE], const time_t timein, const bool millis, const bool uri_compatible);
--- a/src/lua/CMakeLists.txt
+++ b/src/lua/CMakeLists.txt
@@ -88,3 +88,6 @@ else()
 
 target_include_directories(lua PRIVATE ${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/src/lua)
 target_include_directories(ftl_lua PRIVATE ${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/src/lua)
+if(NOT EXISTS "${PROJECT_SOURCE_DIR}/src/version.h")
+    add_dependencies(ftl_lua gen_version)
+endif()
--- a/src/lua/ftl_lua.c
+++ b/src/lua/ftl_lua.c
@@ -13,8 +13,8 @@
 #include "FTL.h"
 // struct luaL_Reg
 #include "lauxlib.h"
-// get_FTL_version()
 #include "log.h"
+#include "version.h"
 // config struct
 #include "config/config.h"
 // file_exists
@@ -39,7 +39,7 @@
 int run_lua_interpreter(const int argc, char **argv, bool dnsmasq_debug)
 {
 	if(argc == 1) // No arguments after this one
-		printf("Pi-hole FTL %s\n", get_FTL_version());
+		printf("Pi-hole FTL %s\n", FTL_VERSION);
 #if defined(LUA_USE_READLINE)
 	wordexp_t word;
 	wordexp(LUA_HISTORY_FILE, &word, WRDE_NOCMD);
@@ -96,13 +96,13 @@ int run_lua_interpreter(const int argc,
 int run_luac(const int argc, char **argv)
 {
 	if(argc == 1) // No arguments after this one
-		printf("Pi-hole FTL %s\n", get_FTL_version());
+		printf("Pi-hole FTL %s\n", FTL_VERSION);
 	return luac_main(argc, argv);
 }
 
 // pihole.ftl_version()
 static int pihole_ftl_version(lua_State *L) {
-	lua_pushstring(L, get_FTL_version());
+	lua_pushstring(L, FTL_VERSION);
 	return 1; // number of results
 }
 
--- a/src/version.h.in
+++ b/src/version.h.in
@@ -1,11 +1,15 @@
 #ifndef VERSION_H
 #define VERSION_H
 
-#define GIT_VERSION "@GIT_VERSION@"
-#define GIT_DATE "@GIT_DATE@"
-#define GIT_BRANCH "@GIT_BRANCH@"
-#define GIT_TAG "@GIT_TAG@"
-#define GIT_HASH "@GIT_HASH@"
+#define FTL_TAG "@FTL_TAG@"
+#define WEB_VERSION "@WEB_VERSION@"
+#define WEB_HASH "@WEB_SOURCE_VERSION@"
+#define CORE_VERSION "@CORE_VERSION@"
+#define CORE_HASH "@CORE_SOURCE_VERSION@"
+#define FTL_VERSION "@FTL_VERSION@"
+#define FTL_DATE "@FTL_DATE@"
+#define FTL_BRANCH "@FTL_BRANCH@"
+#define FTL_HASH "@FTL_HASH@"
 #define FTL_ARCH "@FTL_ARCH@"
 #define FTL_CC "@FTL_CC@"
 
