--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -20,6 +20,14 @@ endif()
 # Put runtime output, i.e. pihole-FTL, in the root of the build dir
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
 
+option(USE_READLINE "Compile with readline support" OFF)
+option(SHARED_SQLITE "Compile with system sqlite3" OFF)
+option(SHARED_LUA "Compile with system lua" OFF)
+option(CONNTRACK_SUPPORT "Compile with conntrack support" OFF)
+option(NFT_SUPPORT "Compile with NFTables support" OFF)
+option(USE_LIBIDN2 "Use idn2 instead of idn" OFF)
+option(IPSET_SUPPORT "Compile with ipset support" ON)
+
 # SQLITE_OMIT_LOAD_EXTENSION: This option omits the entire extension loading mechanism from SQLite, including sqlite3_enable_load_extension() and sqlite3_load_extension() interfaces. (needs -ldl linking option, otherwise)
 # SQLITE_DEFAULT_MEMSTATUS=0: This setting causes the sqlite3_status() interfaces that track memory usage to be disabled. This helps the sqlite3_malloc() routines run much faster, and since SQLite uses sqlite3_malloc() internally, this helps to make the entire library faster.
 # SQLITE_OMIT_DEPRECATED: Omitting deprecated interfaces and features will not help SQLite to run any faster. It will reduce the library footprint, however. And it is the right thing to do.
@@ -29,7 +37,9 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PRO
 # SQLITE_ENABLE_DBPAGE_VTAB: Enables the SQLITE_DBPAGE virtual table. Warning: writing to the SQLITE_DBPAGE virtual table can very easily cause unrecoverably database corruption.
 # SQLITE_OMIT_DESERIALIZE: This option causes the the sqlite3_serialize() and sqlite3_deserialize() interfaces to be omitted from the build (was the default before 3.36.0)
 # HAVE_READLINE: Enable readline support to allow easy editing, history and auto-completion
-set(SQLITE_DEFINES "-DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_DEFAULT_MEMSTATUS=0 -DSQLITE_OMIT_DEPRECATED -DSQLITE_OMIT_PROGRESS_CALLBACK -DSQLITE_DEFAULT_FOREIGN_KEYS=1 -DSQLITE_DQS=0 -DSQLITE_ENABLE_DBPAGE_VTAB -DSQLITE_OMIT_DESERIALIZE -DHAVE_READLINE")
+if(NOT SHARED_SQLITE)
+    set(SQLITE_DEFINES "-DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_DEFAULT_MEMSTATUS=0 -DSQLITE_OMIT_DEPRECATED -DSQLITE_OMIT_PROGRESS_CALLBACK -DSQLITE_DEFAULT_FOREIGN_KEYS=1 -DSQLITE_DQS=0 -DSQLITE_ENABLE_DBPAGE_VTAB -DSQLITE_OMIT_DESERIALIZE")
+endif()
 
 # Code hardening and debugging improvements
 # -fstack-protector-strong: The program will be resistant to having its stack overflowed
@@ -168,17 +178,22 @@ target_compile_definitions(FTL PRIVATE D
 target_include_directories(FTL PRIVATE ${PROJECT_SOURCE_DIR}/src)
 add_dependencies(FTL gen_version)
 
+set(ObjList
+    $<TARGET_OBJECTS:FTL>
+    $<TARGET_OBJECTS:api>
+    $<TARGET_OBJECTS:database>
+    $<TARGET_OBJECTS:dnsmasq>
+    $<TARGET_OBJECTS:tre-regex>
+    $<TARGET_OBJECTS:syscalls>
+    )
+if(NOT SHARED_SQLITE)
+    list(APPEND ObjList $<TARGET_OBJECTS:sqlite3>)
+endif()
+if(NOT SHARED_LUA)
+    list(APPEND ObjList $<TARGET_OBJECTS:lua>)
+endif()
+add_executable(pihole-FTL ${ObjList})
 
-add_executable(pihole-FTL
-        $<TARGET_OBJECTS:FTL>
-        $<TARGET_OBJECTS:api>
-        $<TARGET_OBJECTS:database>
-        $<TARGET_OBJECTS:dnsmasq>
-        $<TARGET_OBJECTS:sqlite3>
-        $<TARGET_OBJECTS:lua>
-        $<TARGET_OBJECTS:tre-regex>
-        $<TARGET_OBJECTS:syscalls>
-        )
 if(STATIC STREQUAL "true")
     set_target_properties(pihole-FTL PROPERTIES LINK_SEARCH_START_STATIC ON)
     set_target_properties(pihole-FTL PROPERTIES LINK_SEARCH_END_STATIC ON)
@@ -192,43 +207,73 @@ set(THREADS_PREFER_PTHREAD_FLAG TRUE)
 find_package(Threads REQUIRED)
 
 # for DNSSEC we need the nettle (+ hogweed) crypto and the gmp math libraries
-find_library(LIBHOGWEED NAMES libhogweed${CMAKE_STATIC_LIBRARY_SUFFIX} hogweed)
-find_library(LIBGMP NAMES libgmp${CMAKE_STATIC_LIBRARY_SUFFIX} gmp)
-find_library(LIBNETTLE NAMES libnettle${CMAKE_STATIC_LIBRARY_SUFFIX} nettle)
-find_library(LIBIDN NAMES libidn${CMAKE_STATIC_LIBRARY_SUFFIX} idn)
+find_library(LIBHOGWEED hogweed)
+find_library(LIBGMP gmp)
+find_library(LIBNETTLE nettle)
+find_library(LIBUBOX ubox)
+find_library(LIBUBUS ubus)
+if(USE_LIBIDN2)
+    find_library(LIBIDN idn2)
+else()
+    find_library(LIBIDN idn)
+endif()
+
+target_link_libraries(pihole-FTL rt Threads::Threads ${LIBIDN})
+
+if(CONNTRACK_SUPPORT)
+    find_library(LIBNETFILTER_CONNTRACK netfilter_conntrack)
+    find_library(LIBNFNETLINK nfnetlink)
+    target_link_libraries(pihole-FTL ${LIBNETFILTER_CONNTRACK} ${LIBNFNETLINK})
+endif()
+
+target_link_libraries(pihole-FTL ${LIBNETTLE} ${LIBHOGWEED} ${LIBGMP} ${LIBUBOX} ${LIBUBUS})
 
-target_link_libraries(pihole-FTL rt Threads::Threads ${LIBHOGWEED} ${LIBGMP} ${LIBNETTLE} ${LIBIDN})
+if(NFT_SUPPORT)
+    find_library(LIBNFTABLES nftables)
+    target_link_libraries(pihole-FTL ${LIBNFTABLES})
+endif()
+
+if (SHARED_SQLITE)
+    message(STATUS "Using system sqlite3")
+    find_library(LIBSQLITE sqlite3)
+    target_link_libraries(pihole-FTL ${LIBSQLITE})
+    target_compile_definitions(FTL PRIVATE SYSTEM_SQLITE3=\"/usr/bin/sqlite3\")
+endif()
+
+if (SHARED_LUA)
+    message(STATUS "Using system lua5.3")
+    find_library(LIBLUA lua5.3)
+    include_directories(${LUA_INCLUDE_DIR})
+    target_link_libraries(pihole-FTL ${LIBLUA})
+    target_compile_definitions(FTL PRIVATE SYSTEM_LUAC=\"/usr/bin/luac5.3\" SYSTEM_LUA=\"/usr/bin/lua5.3\")
+endif()
 
 if(LUA_DL STREQUAL "true")
     find_library(LIBDL dl)
     target_link_libraries(pihole-FTL ${LIBDL})
 endif()
 
-find_library(LIBREADLINE NAMES libreadline${CMAKE_STATIC_LIBRARY_SUFFIX} readline)
-find_library(LIBHISTORY NAMES libhistory${CMAKE_STATIC_LIBRARY_SUFFIX} history)
-find_library(LIBTERMCAP NAMES libtermcap${CMAKE_STATIC_LIBRARY_SUFFIX} termcap)
-if(LIBREADLINE AND LIBHISTORY AND LIBTERMCAP)
+if(NOT SHARED_LUA OR NOT SHARED_SQLITE AND USE_READLINE)
+    find_library(LIBREADLINE readline)
     message(STATUS "Building FTL with readline support: YES")
     target_compile_definitions(FTL PRIVATE LUA_USE_READLINE)
     target_compile_definitions(pihole-FTL PRIVATE LUA_USE_READLINE)
-    target_link_libraries(pihole-FTL ${LIBREADLINE} ${LIBHISTORY} ${LIBTERMCAP})
-else()
-    message(STATUS "Building FTL with readline support: NO")
+    target_link_libraries(pihole-FTL ${LIBREADLINE})
 endif()
 
 if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
     set(CMAKE_INSTALL_PREFIX "/usr" CACHE PATH "..." FORCE)
 endif()
 
-find_program(SETCAP setcap)
 install(TARGETS pihole-FTL
         RUNTIME DESTINATION bin
         PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
-install(CODE "execute_process(COMMAND ${SETCAP} CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_NET_ADMIN,CAP_SYS_NICE+eip \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/pihole-FTL)")
 
 add_subdirectory(api)
 add_subdirectory(database)
 add_subdirectory(dnsmasq)
-add_subdirectory(lua)
+if (NOT SHARED_LUA)
+    add_subdirectory(lua)
+endif()
 add_subdirectory(tre-regex)
 add_subdirectory(syscalls)
--- a/src/args.c
+++ b/src/args.c
@@ -25,7 +25,11 @@
 // init_shmem()
 #include "shmem.h"
 // LUA dependencies
+#if defined(SYSTEM_LUA) && defined(SYSTEM_LUAC)
+#include <lua.h>
+#else
 #include "lua/ftl_lua.h"
+#endif
 // run_dhcp_discover()
 #include "dhcp-discover.h"
 // defined in dnsmasq.c
@@ -33,8 +37,10 @@ extern void print_dnsmasq_version(void);
 extern void do_version(void);
 extern void do_usage(void);
 
+#ifndef SYSTEM_SQLITE3
 // defined in database/shell.c
 extern int sqlite3_shell_main(int argc, char **argv);
+#endif
 
 bool dnsmasq_debug = false;
 bool daemonmode = true, cli_mode = false;
@@ -45,6 +51,49 @@ static inline bool strEndsWith(const cha
 	return strcmp(input + strlen(input) - strlen(end), end) == 0;
 }
 
+#ifdef SYSTEM_SQLITE3
+static int sqlite3_shell_main(int argc, char **argv)
+{
+	if (execv(SYSTEM_SQLITE3, argv) == -1) {
+		perror("execv");
+		return 1;
+	}
+	(void)argc;
+	return 0;
+}
+#endif
+
+#ifdef SYSTEM_LUAC
+static int run_luac(int argc, char **argv)
+{
+	(void)argc;
+	if (execv(SYSTEM_LUAC, argv) == -1) {
+		perror("execv");
+		return 1;
+	}
+	(void)argc;
+	return 0;
+}
+
+static int luac_main(int argc, char **argv)
+{
+	return run_luac(argc, argv);
+}
+#endif
+
+#ifdef SYSTEM_LUA
+static int run_lua_interpreter(const int argc, char **argv, bool debug)
+{
+	(void)argc;
+	if (execv(SYSTEM_LUA, argv) == -1) {
+		perror("execv");
+		return 1;
+	}
+	(void)argc; (void)debug;
+	return 0;
+}
+#endif
+
 void parse_args(int argc, char* argv[])
 {
 	bool quiet = false;
@@ -252,7 +301,11 @@ void parse_args(int argc, char* argv[])
 			print_dnsmasq_version();
 
 			// Print SQLite3 version and compile time options
+#ifdef SYSTEM_SQLITE3
+			printf("************************** System SQLite3 ***************************\n");
+#else
 			printf("****************************** SQLite3 ******************************\n");
+#endif
 			printf("Version:         %s\n", sqlite3_libversion());
 			printf("Compile options: ");
 			unsigned int o = 0;
@@ -263,8 +316,12 @@ void parse_args(int argc, char* argv[])
 					printf(" ");
 				printf("%s", opt);
 			}
-			printf("\n");
+			printf("\n\n");
+#if defined(SYSTEM_LUA) && defined(SYSTEM_LUAC)
+			printf("**************************** System LUA *****************************\n");
+#else
 			printf("******************************** LUA ********************************\n");
+#endif
 			printf(LUA_COPYRIGHT"\n");
 			exit(EXIT_SUCCESS);
 		}
--- a/src/database/CMakeLists.txt
+++ b/src/database/CMakeLists.txt
@@ -12,13 +12,22 @@
 # to build. It is placed in its own target so that it does not include any other
 # headers in the build command and thus does not need to be rebuilt when headers
 # are modified.
-set(sqlite3_sources
+if (NOT SHARED_SQLITE)
+	set(sqlite3_sources
         shell.c
         sqlite3.c
         )
 
-add_library(sqlite3 OBJECT ${sqlite3_sources})
-target_compile_options(sqlite3 PRIVATE -Wno-implicit-fallthrough -Wno-cast-function-type)
+	add_library(sqlite3 OBJECT ${sqlite3_sources})
+	target_compile_options(sqlite3 PRIVATE -Wno-implicit-fallthrough -Wno-cast-function-type)
+
+	if(USE_READLINE)
+	    message(STATUS "Embedded SQLITE3 will use readline for history: YES")
+	    target_compile_definitions(sqlite3 PRIVATE HAVE_READLINE)
+	else()
+	    message(STATUS "Embedded SQLITE3 will use readline for history: NO")
+	endif()
+endif()
 
 set(database_sources
         common.c
@@ -33,13 +42,16 @@ set(database_sources
         network-table.h
         query-table.c
         query-table.h
-        sqlite3.h
         sqlite3-ext.c
         sqlite3-ext.h
         aliasclients.c
         aliasclients.h
         )
 
+if(NOT SHARED_SQLITE)
+   list(APPEND database_sources sqlite3.h)
+endif()
+
 add_library(database OBJECT ${database_sources})
 target_compile_options(database PRIVATE "${EXTRAWARN}")
 target_include_directories(database PRIVATE ${PROJECT_SOURCE_DIR}/src)
--- a/src/database/common.h
+++ b/src/database/common.h
@@ -10,7 +10,11 @@
 #ifndef DATABASE_COMMON_H
 #define DATABASE_COMMON_H
 
+#ifdef SYSTEM_SQLITE3
+#include <sqlite3.h>
+#else
 #include "sqlite3.h"
+#endif
 
 // Database table "ftl"
 enum ftl_table_props {
--- a/src/database/gravity-db.c
+++ b/src/database/gravity-db.c
@@ -9,7 +9,11 @@
 *  Please see LICENSE file for your rights under this license. */
 
 #include "../FTL.h"
+#ifdef SYSTEM_SQLITE3
+#include <sqlite3.h>
+#else
 #include "sqlite3.h"
+#endif
 #include "gravity-db.h"
 // struct config
 #include "../config.h"
--- a/src/database/network-table.h
+++ b/src/database/network-table.h
@@ -10,7 +10,11 @@
 #ifndef NETWORKTABLE_H
 #define NETWORKTABLE_H
 
+#ifdef SYSTEM_SQLITE3
+#include <sqlite3.h>
+#else
 #include "sqlite3.h"
+#endif
 
 bool create_network_table(sqlite3 *db);
 bool create_network_addresses_table(sqlite3 *db);
--- a/src/database/query-table.h
+++ b/src/database/query-table.h
@@ -10,7 +10,11 @@
 #ifndef DATABASE_QUERY_TABLE_H
 #define DATABASE_QUERY_TABLE_H
 
+#ifdef SYSTEM_SQLITE3
+#include <sqlite3.h>
+#else
 #include "sqlite3.h"
+#endif
 
 int get_number_of_queries_in_DB(sqlite3 *db);
 void delete_old_queries_in_DB(sqlite3 *db);
--- a/src/datastructure.h
+++ b/src/datastructure.h
@@ -11,7 +11,11 @@
 #define DATASTRUCTURE_H
 
 // Definition of sqlite3_stmt
+#ifdef SYSTEM_SQLITE3
+#include <sqlite3.h>
+#else
 #include "database/sqlite3.h"
+#endif
 
 // enum privacy_level
 #include "enums.h"
--- a/src/dnsmasq/CMakeLists.txt
+++ b/src/dnsmasq/CMakeLists.txt
@@ -52,8 +52,25 @@ set(sources
         util.c
         )
 
+set(DNSMQ_OPTS "-DHAVE_UBUS")
+if(CONNTRACK_SUPPORT)
+    set(DNSMQ_OPTS "${DNSMQ_OPTS} -DHAVE_CONNTRACK")
+endif()
+if(NFT_SUPPORT)
+    set(DNSMQ_OPTS "${DNSMQ_OPTS} -DHAVE_NFTSET")
+endif()
+if(USE_LIBIDN2)
+    set(DNSMQ_OPTS "${DNSMQ_OPTS} -DHAVE_LIBIDN2")
+endif()
+if(NOT IPSET_SUPPORT)
+    set(DNSMQ_OPTS "${DNSMQ_OPTS} -DNO_IPSET")
+endif()
+
 add_library(dnsmasq OBJECT ${sources})
-target_compile_definitions(dnsmasq PRIVATE VERSION=\"${DNSMASQ_VERSION}\")
+target_compile_definitions(dnsmasq PRIVATE VERSION=\"${DNSMASQ_VERSION}\" ${DNSMQ_OPTS})
 target_compile_options(dnsmasq PRIVATE -Wno-maybe-uninitialized)
-target_include_directories(dnsmasq PRIVATE ${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/src/lua)
+target_include_directories(dnsmasq PRIVATE ${PROJECT_SOURCE_DIR}/src)
+if(NOT SHARED_LUA)
+    target_include_directories(dnsmasq PRIVATE ${PROJECT_SOURCE_DIR}/src/lua)
+endif()
 add_dependencies(dnsmasq gen_version)
--- a/src/lua/CMakeLists.txt
+++ b/src/lua/CMakeLists.txt
@@ -77,7 +77,7 @@ if(LUA_DL STREQUAL "true")
     target_compile_definitions(lua PRIVATE LUA_USE_DLOPEN)
 endif()
 
-if(LIBREADLINE AND LIBHISTORY AND LIBTERMCAP)
+if(USE_READLINE)
     message(STATUS "Embedded LUA will use readline for history: YES")
     target_compile_definitions(lua PRIVATE LUA_USE_READLINE)
 else()
--- a/src/lua/ftl_lua.c
+++ b/src/lua/ftl_lua.c
@@ -13,7 +13,9 @@
 // struct luaL_Reg
 #include "lauxlib.h"
 #include "../version.h"
+#if defined(LUA_USE_READLINE)
 #include <readline/history.h>
+#endif
 #include <wordexp.h>
 
 int run_lua_interpreter(const int argc, char **argv, bool dnsmasq_debug)
--- a/src/vector.h
+++ b/src/vector.h
@@ -17,7 +17,11 @@
 // type bool
 #include <stdbool.h>
 // type sqlite3_stmt
+#ifdef SYSTEM_SQLITE3
+#include <sqlite3.h>
+#else
 #include "database/sqlite3.h"
+#endif
 // assert_sizeof
 #include "static_assert.h"
 
