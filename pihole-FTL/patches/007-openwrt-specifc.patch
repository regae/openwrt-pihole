--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -61,7 +61,7 @@ endif()
 # -Wl,-z,relro: Read-only segments after relocation
 # -fno-common: Emit globals without explicit initializer from `.bss` to `.data`. This causes GCC to reject multiple definitions of global variables. This is the new default from GCC-10 on.
 if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
-    set(HARDENING_FLAGS "-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro -fno-common")
+    set(HARDENING_FLAGS "-fstack-protector-strong -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -fno-common")
     set(DEBUG_FLAGS "-rdynamic -fno-omit-frame-pointer")
 endif()
 
@@ -266,8 +266,6 @@ set(sources
         shmem.h
         signals.c
         signals.h
-        struct_size.c
-        struct_size.h
         timers.c
         timers.h
         vector.c
--- a/src/api/action.c
+++ b/src/api/action.c
@@ -117,7 +117,7 @@ static int run_and_stream_command(struct
 
 int api_action_gravity(struct ftl_conn *api)
 {
-	return run_and_stream_command(api, "/usr/local/bin/pihole", (const char *const []){ "pihole", "-g", NULL });
+	return run_and_stream_command(api, "/usr/bin/pihole", (const char *const []){ "pihole", "-g", NULL });
 }
 
 int api_action_restartDNS(struct ftl_conn *api)
--- a/src/api/docs/content/specs/config.yaml
+++ b/src/api/docs/content/specs/config.yaml
@@ -739,7 +739,7 @@ components:
             tls:
               cert: "/etc/pihole/tls.pem"
             paths:
-              webroot: "/var/www/html"
+              webroot: "/usr/lib/pihole"
               webhome: "/admin/"
             interface:
               boxed: true
@@ -763,7 +763,7 @@ components:
                 limit: 60.0
                 unit: "C"
           files:
-            pid: "/run/pihole-FTL.pid"
+            pid: "/tmp/run/pihole-FTL.pid"
             database: "/etc/pihole/pihole-FTL.db"
             gravity: "/etc/pihole/gravity.db"
             gravity_tmp: "/tmp"
--- a/src/api/docs/content/specs/teleporter.yaml
+++ b/src/api/docs/content/specs/teleporter.yaml
@@ -149,7 +149,7 @@ components:
     teleporter:
       value:
         processed:
-          - etc/pihole/pihole.toml
+          - tmp/etc/pihole.toml
           - etc/pihole/gravity.db->group
           - etc/pihole/gravity.db->adlist
           - etc/pihole/gravity.db->adlist_by_group
--- a/src/config/config.c
+++ b/src/config/config.c
@@ -1010,7 +1010,7 @@ void initConfig(struct config *conf)
 	conf->webserver.paths.webroot.a = cJSON_CreateStringReference("<valid path>");
 	conf->webserver.paths.webroot.t = CONF_STRING;
 	conf->webserver.paths.webroot.f = FLAG_RESTART_FTL;
-	conf->webserver.paths.webroot.d.s = (char*)"/var/www/html";
+	conf->webserver.paths.webroot.d.s = (char*)"/usr/lib/pihole";
 	conf->webserver.paths.webroot.c = validate_filepath;
 
 	conf->webserver.paths.webhome.k = "webserver.paths.webhome";
@@ -1167,7 +1167,7 @@ void initConfig(struct config *conf)
 	conf->files.pid.a = cJSON_CreateStringReference("<any writable file>");
 	conf->files.pid.t = CONF_STRING;
 	conf->files.pid.f = FLAG_RESTART_FTL;
-	conf->files.pid.d.s = (char*)"/run/pihole-FTL.pid";
+	conf->files.pid.d.s = (char*)"/tmp/run/pihole-FTL.pid";
 	conf->files.pid.c = validate_filepath;
 
 	conf->files.database.k = "files.database";
@@ -1224,7 +1224,7 @@
 	conf->files.log.dnsmasq.a = cJSON_CreateStringReference("<any writable file>");
 	conf->files.log.dnsmasq.t = CONF_STRING;
 	conf->files.log.dnsmasq.f = FLAG_RESTART_FTL;
-	conf->files.log.dnsmasq.d.s = (char*)"/var/log/pihole/pihole.log";
+	conf->files.log.dnsmasq.d.s = (char*)"/var/log/pihole/pihole.log";
 	conf->files.log.dnsmasq.c = validate_filepath_dash;
 
 
@@ -1645,7 +1645,7 @@
 	config.files.log.ftl.h = "The location of FTL's log file";
 	config.files.log.ftl.a = cJSON_CreateStringReference("<any writable file>");
 	config.files.log.ftl.t = CONF_STRING;
-	config.files.log.ftl.d.s = (char*)"/var/log/pihole/FTL.log";
+	config.files.log.ftl.d.s = (char*)"/var/log/pihole/FTL.log";
 	config.files.log.ftl.v.s = config.files.log.ftl.d.s;
 	config.files.log.ftl.c = validate_filepath;
 
--- a/src/config/config.h
+++ b/src/config/config.h
@@ -32,7 +32,7 @@
 // enum web_theme
 #include "api/theme.h"
 
-#define GLOBALTOMLPATH "/etc/pihole/pihole.toml"
+#define GLOBALTOMLPATH "/tmp/etc/pihole.toml"
 
 // This static string represents an unchanged password
 #define PASSWORD_VALUE "********"
--- a/src/config/dnsmasq_config.c
+++ b/src/config/dnsmasq_config.c
@@ -210,12 +210,12 @@ static void write_config_header(FILE *fp
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "ANY CHANGES MADE TO THIS FILE WILL BE LOST WHEN THE CONFIGURATION CHANGES");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "IF YOU WISH TO CHANGE ANY OF THESE VALUES, CHANGE THEM IN");
-	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "/etc/pihole/pihole.toml");
+	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "/tmp/etc/pihole.toml");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "and restart pihole-FTL");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "ANY OTHER CHANGES SHOULD BE MADE IN A SEPARATE CONFIG FILE");
-	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "WITHIN /etc/dnsmasq.d/yourname.conf");
-	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "(make sure misc.etc_dnsmasq_d is set to true in /etc/pihole/pihole.toml)");
+	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "WITHIN /tmp/dnsmasq.d/yourname.conf");
+	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "(make sure misc.etc_dnsmasq_d is set to true in pihole.toml)");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "%s", "");
 	CONFIG_CENTER(fp, HEADER_WIDTH, "Last updated: %s", timestring);
 	CONFIG_CENTER(fp, HEADER_WIDTH, "by FTL version %s", FTL_VERSION);
@@ -678,12 +678,12 @@ bool __attribute__((const)) write_dnsmas
 	fputs("server=/onion/\n", pihole_conf);
 	fputs("\n", pihole_conf);
 
-	if(directory_exists("/etc/dnsmasq.d") && conf->misc.etc_dnsmasq_d.v.b)
+	if(directory_exists("/tmp/dnsmasq.d") && conf->misc.etc_dnsmasq_d.v.b)
 	{
-		// Load additional user scripts from /etc/dnsmasq.d if the
+		// Load additional user scripts from /tmp/dnsmasq.d if the
 		// directory exists (it may not, e.g., in a container)
 		fputs("# Load additional user scripts\n", pihole_conf);
-		fputs("conf-dir=/etc/dnsmasq.d\n", pihole_conf);
+		fputs("conf-dir=/tmp/dnsmasq.d\n", pihole_conf);
 		fputs("\n", pihole_conf);
 	}
 
--- a/src/config/dnsmasq_config.h
+++ b/src/config/dnsmasq_config.h
@@ -19,11 +19,11 @@
 char *get_dnsmasq_line(const unsigned int lineno);
 bool write_custom_list(void);
 
-#define DNSMASQ_PH_CONFIG "/etc/pihole/dnsmasq.conf"
-#define DNSMASQ_TEMP_CONF "/etc/pihole/dnsmasq.conf.temp"
+#define DNSMASQ_PH_CONFIG "/tmp/etc/dnsmasq.conf"
+#define DNSMASQ_TEMP_CONF "/tmp/etc/dnsmasq.conf.temp"
-#define DNSMASQ_HOSTSDIR "/etc/pihole/hosts"
+#define DNSMASQ_HOSTSDIR "/tmp/hosts"
 #define DNSMASQ_CUSTOM_LIST DNSMASQ_HOSTSDIR"/custom.list"
 #define DNSMASQ_CUSTOM_LIST_LEGACY "/etc/pihole/custom.list"
-#define DHCPLEASESFILE "/etc/pihole/dhcp.leases"
+#define DHCPLEASESFILE "/tmp/dhcp.leases"
 
 #endif //DNSMASQ_CONFIG_H
--- a/src/dnsmasq/config.h
+++ b/src/dnsmasq/config.h
@@ -31,8 +31,8 @@
 #define FORWARD_TEST 1000 /* try all servers every 1000 queries */
 #define FORWARD_TIME 600 /* or 10 minutes */
 #define UDP_TEST_TIME 60 /* How often to reset our idea of max packet size. */
-#define SERVERS_LOGGED 300 /* Only log this many servers when logging state */
-#define LOCALS_LOGGED 8 /* Only log this many local addresses when logging state */
+#define SERVERS_LOGGED 3 /* Only log this many servers when logging state */
+#define LOCALS_LOGGED 3 /* Only log this many local addresses when logging state */
 #define LEASE_RETRY 60 /* on error, retry writing leasefile after LEASE_RETRY seconds */
 #define CACHESIZ 150 /* default cache size */
 #define TTL_FLOOR_LIMIT 3600 /* don't allow --min-cache-ttl to raise TTL above this under any circumstances */
@@ -235,7 +235,7 @@ RESOLVFILE
 #   if defined(__FreeBSD__)
 #      define CONFFILE "/usr/local/etc/dnsmasq.conf"
 #   else
-#      define CONFFILE "/etc/dnsmasq.conf"
+#      define CONFFILE "/tmp/etc/dnsmasq.conf"
 #   endif
 #endif
 
--- a/src/gc.c
+++ b/src/gc.c
@@ -466,18 +466,6 @@ void runGC(const time_t now, time_t *las
 	DBdeleteoldqueries = true;
 }
 
-static bool check_files_on_same_device(const char *path1, const char *path2)
-{
-	struct stat s1, s2;
-	if(stat(path1, &s1) != 0 || stat(path2, &s2) != 0)
-	{
-		log_warn("check_files_on_same_device(): stat() failed: %s", strerror(errno));
-		return false;
-	}
-
-	return s1.st_dev == s2.st_dev;
-}
-
 void *GC_thread(void *val)
 {
 	// Set thread name
@@ -493,9 +481,6 @@ void *GC_thread(void *val)
 	unsigned int LastLogStorageUsage = 0;
 	unsigned int LastDBStorageUsage = 0;
 
-	bool db_and_log_on_same_dev = false;
-	db_and_log_on_same_dev = check_files_on_same_device(config.files.database.v.s, config.files.log.ftl.v.s);
-
 	// Create inotify watcher for pihole.toml config file
 	watch_config(true);
 
@@ -531,11 +516,12 @@ void *GC_thread(void *val)
 			check_load();
 
 			// Check disk space of database file
-			LastDBStorageUsage = check_space(config.files.database.v.s, LastDBStorageUsage);
+			if(config.files.database.v.s != NULL)
+				LastDBStorageUsage = check_space(config.files.database.v.s, LastDBStorageUsage);
 
 			// Check disk space of log file only if they are not on
 			// the same file system
-			if(!db_and_log_on_same_dev)
+			if(config.files.log.ftl.v.s != NULL)
 				LastLogStorageUsage = check_space(config.files.log.ftl.v.s, LastLogStorageUsage);
 
 			lastResourceCheck = now;
--- a/src/log.c
+++ b/src/log.c
@@ -271,8 +271,8 @@ void __attribute__ ((format (gnu_printf,
 	if((!daemonmode || cli_mode) && print_stdout)
 	{
 		// Only print time/ID string when not in direct user interaction (CLI mode)
-		if(!cli_mode)
-			printf("%s [%s] %s: ", timestring, idstr, prio);
+		//if(!cli_mode)
+		//	printf("%s [%s] %s: ", timestring, idstr, prio);
 		va_start(args, format);
 		vprintf(format, args);
 		va_end(args);
--- a/src/lua/scripts/CMakeLists.txt
+++ b/src/lua/scripts/CMakeLists.txt
@@ -33,3 +33,5 @@ add_dependencies(lua lua_scripts)
 add_library(lua_scripts OBJECT ${sources})
 target_compile_options(lua_scripts PRIVATE ${EXTRAWARN})
 target_include_directories(lua_scripts PRIVATE ${PROJECT_SOURCE_DIR}/src)
+# Fix for ninja
+set_target_properties(lua_scripts PROPERTIES LINKER_LANGUAGE C)
--- a/src/procps.c
+++ b/src/procps.c
@@ -216,7 +216,7 @@ bool check_running_FTL(void)
 		log_debug(DEBUG_SHMEM, "PID: %d -> name: %s%s", pid, name, pid == ourselves ? " (us)" : "");
 
 		// Skip our own process
-		if(pid == ourselves)
+		if(pid == ourselves || pid - ourselves == 1)
 			continue;
 
 		// Only process this is this is our own process
--- a/src/zip/miniz/CMakeLists.txt
+++ b/src/zip/miniz/CMakeLists.txt
@@ -15,4 +15,5 @@ set(sources
 
 add_library(miniz OBJECT ${sources})
 target_compile_options(miniz PRIVATE -Wno-padded -Wno-type-limits)
+target_compile_options(miniz PRIVATE -D_LARGEFILE64_SOURCE)
 target_include_directories(miniz PRIVATE ${PROJECT_SOURCE_DIR}/src)
