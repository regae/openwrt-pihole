--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -351,6 +351,12 @@ if(CONNTRACK_SUPPORT)
     target_link_libraries(pihole-FTL ${LIBNETFILTER_CONNTRACK} ${LIBNFNETLINK})
 endif()
 
+find_library(LIBUCI uci)
+if(NOT LIBUCI)
+    message(FATAL_ERROR "libuci not found")
+endif()
+target_link_libraries(pihole-FTL ${LIBUCI})
+
 if(NFT_SUPPORT)
     find_library(LIBNFTABLES nftables)
     target_link_libraries(pihole-FTL ${LIBNFTABLES})
--- a/src/api/config.c
+++ b/src/api/config.c
@@ -693,6 +693,8 @@ static int api_config_patch(struct ftl_c
 	bool config_changed = false;
 	bool dnsmasq_changed = false;
 	bool rewrite_hosts = false;
+	bool commit_uci = false;
+	const char *pkg_commit = NULL;
 	struct config newconf;
 	duplicate_config(&newconf, &config);
 	for(unsigned int i = 0; i < CONFIG_ELEMENTS; i++)
@@ -796,6 +798,20 @@ static int api_config_patch(struct ftl_c
 			                       errbuf);
 		}
 
+		// Set to uci config
+		if(!uci_set_value(new_item, NULL, false)) {
+			commit_uci = true;
+			pkg_commit = (new_item->f & FLAG_PKG_DHCP) ? "dhcp" : "pihole";
+		}
+		else {
+			log_err("Failed to save new config for: %s", new_item->k);
+			free_config(&newconf);
+			return send_json_error(api, 500,
+			                       "internal_error",
+			                       "failed to set UCI value",
+			                       NULL);
+		}
+
 		// Check if this item requires a config-rewrite + restart of dnsmasq
 		if(conf_item->f & FLAG_RESTART_FTL)
 			dnsmasq_changed = true;
@@ -846,6 +862,14 @@ static int api_config_patch(struct ftl_c
 		// Rewrite HOSTS file if required
 		if(rewrite_hosts)
 			write_custom_list();
+
+		if(commit_uci && pkg_commit != NULL) {
+			struct uci_package *p = _uci_lookup_package(pkg_commit);
+			if (p)
+				_uci_commit(&p);
+			else
+				log_warn("Failed to commit package: %s", pkg_commit);
+		}
 	}
 	else
 	{
@@ -970,6 +994,10 @@ static int api_config_put_delete(struct
 				// Remove item from array
 				found = true;
 				cJSON_DeleteItemFromArray(new_item->v.json, idx);
+				// delete uci value
+				if(uci_foreach_section(new_item, new_item_str, true))
+					return send_json_error(api, 500, "internal_error",
+					                       "failed to delete section", NULL);
 			}
 			else
 			{
@@ -992,6 +1020,11 @@ static int api_config_put_delete(struct
 				                       "Invalid value",
 				                       errbuf);
 			}
+
+			// set uci value
+			if(uci_foreach_section(new_item, new_item_str, false))
+				return send_json_error(api, 500, "internal_error",
+				                       "failed to create section", NULL);
 		}
 
 		// Check if this item requires a config-rewrite + restart of dnsmasq
--- a/src/args.c
+++ b/src/args.c
@@ -208,6 +208,9 @@ void parse_args(int argc, char* argv[])
 	argv_dnsmasq[1] = "-k";
 	argv_dnsmasq[2] = "";
 
+	// for exit code
+	int ret = EXIT_FAILURE;
+
 	bool consume_for_dnsmasq = false;
 	// If the binary name is "dnsmasq" (e.g., symlink /usr/bin/dnsmasq -> /usr/bin/pihole-FTL),
 	// we operate in drop-in mode and consume all arguments for the embedded dnsmasq core
@@ -300,19 +303,21 @@ void parse_args(int argc, char* argv[])
 		log_ctrl(false, true);
 		clear_debug_flags(); // No debug printing wanted
 		if(argc == 2)
-			exit(get_config_from_CLI(NULL, false));
+			ret = get_config_from_CLI(NULL, false);
 		else if(argc == 3)
-			exit(get_config_from_CLI(argv[2], false));
+			ret = get_config_from_CLI(argv[2], false);
 		else if(argc == 4 && strcmp(argv[2], "-q") == 0)
-			exit(get_config_from_CLI(argv[3], true));
+			ret = get_config_from_CLI(argv[3], true);
 		else if(argc == 4)
-			exit(set_config_from_CLI(argv[2], argv[3]));
+			ret = set_config_from_CLI(argv[2], argv[3]);
 		else
 		{
 			printf("Usage: %s --config [<config item key>] [<value>]\n", argv[0]);
 			printf("Example: %s --config dns.blockESNI true\n", argv[0]);
-			exit(EXIT_FAILURE);
 		}
+		clean_all_leftovers();
+		uci_clean_config();
+		exit(ret);
 	}
 
 
@@ -324,7 +329,10 @@ void parse_args(int argc, char* argv[])
 		readFTLconf(&config, false);
 		log_ctrl(false, true);
 		clear_debug_flags(); // No debug printing wanted
-		exit(printTOTP());
+		ret = printTOTP();
+		clean_all_leftovers();
+		uci_clean_config();
+		exit(ret);
 	}
 
 
@@ -335,7 +343,10 @@ void parse_args(int argc, char* argv[])
 		cli_mode = true;
 		log_ctrl(false, true);
 		readFTLconf(&config, false);
-		exit(write_teleporter_zip_to_disk() ? EXIT_SUCCESS : EXIT_FAILURE);
+		ret = write_teleporter_zip_to_disk() ? EXIT_SUCCESS : EXIT_FAILURE;
+		clean_all_leftovers();
+		uci_clean_config();
+		exit(ret);
 	}
 
 	// Create test NTP client
@@ -367,7 +378,10 @@ void parse_args(int argc, char* argv[])
 		cli_mode = true;
 		log_ctrl(false, true);
 		readFTLconf(&config, false);
-		exit(ntp_client(server, update, true) ? EXIT_SUCCESS : EXIT_FAILURE);
+		ret = ntp_client(server, update, true) ? EXIT_SUCCESS : EXIT_FAILURE;
+		clean_all_leftovers();
+		uci_clean_config();
+		exit(ret);
 	}
 
 	// Import teleporter archive through CLI
@@ -377,7 +391,10 @@ void parse_args(int argc, char* argv[])
 		cli_mode = true;
 		log_ctrl(false, true);
 		readFTLconf(&config, false);
-		exit(read_teleporter_zip_from_disk(argv[2]) ? EXIT_SUCCESS : EXIT_FAILURE);
+		ret = read_teleporter_zip_from_disk(argv[2]) ? EXIT_SUCCESS : EXIT_FAILURE;
+		clean_all_leftovers();
+		uci_clean_config();
+		exit(ret);
 	}
 
 	// Generate X.509 certificate
@@ -422,6 +439,7 @@ void parse_args(int argc, char* argv[])
 		{
 			readFTLconf(&config, false);
 			certfile = config.webserver.tls.cert.v.s;
+			uci_clean_config();
 		}
 		else
 			certfile = argv[2];
@@ -585,6 +603,9 @@ void parse_args(int argc, char* argv[])
 		// Close the socket
 		close(sock);
 
+		clean_all_leftovers();
+		uci_clean_config();
+
 		// Exit early if no name was found
 		if(name == NULL)
 			exit(EXIT_FAILURE);
--- a/src/config/CMakeLists.txt
+++ b/src/config/CMakeLists.txt
@@ -13,6 +13,8 @@ set(sources
         cli.h
         config.c
         config.h
+        config_uci.c
+        config_uci.h
         dnsmasq_config.c
         dnsmasq_config.h
         env.c
--- a/src/config/cli.c
+++ b/src/config/cli.c
@@ -35,7 +35,7 @@ enum exit_codes {
 } __attribute__((packed));
 
 // Read a TOML value from a table depending on its type
-static bool readStringValue(struct conf_item *conf_item, const char *value, struct config *newconf)
+bool readStringValue(struct conf_item *conf_item, const char *value, struct config *newconf)
 {
 	if(conf_item == NULL || value == NULL)
 	{
@@ -47,9 +47,9 @@ static bool readStringValue(struct conf_
 	{
 		case CONF_BOOL:
 		{
-			if(strcasecmp(value, "true") == 0 || strcasecmp(value, "yes") == 0)
+			if(strcasecmp(value, "true") == 0 || strcasecmp(value, "yes") == 0 || value[0] == '1')
 				conf_item->v.b = true;
-			else if(strcasecmp(value, "false") == 0 || strcasecmp(value, "no") == 0)
+			else if(strcasecmp(value, "false") == 0 || strcasecmp(value, "no") == 0  || value[0] == '0')
 				conf_item->v.b = false;
 			else
 			{
@@ -60,13 +60,13 @@ static bool readStringValue(struct conf_
 		}
 		case CONF_ALL_DEBUG_BOOL:
 		{
-			if(strcasecmp(value, "true") == 0 || strcasecmp(value, "yes") == 0)
+			if(strcasecmp(value, "true") == 0 || strcasecmp(value, "yes") == 0  || value[0] == '1')
 			{
 				set_all_debug(newconf, true);
 				conf_item->v.b = true;
 				set_debug_flags(newconf);
 			}
-			else if(strcasecmp(value, "false") == 0 || strcasecmp(value, "no") == 0)
+			else if(strcasecmp(value, "false") == 0 || strcasecmp(value, "no") == 0  || value[0] == '0')
 			{
 				set_all_debug(newconf, false);
 				conf_item->v.b = false;
@@ -74,7 +74,7 @@ static bool readStringValue(struct conf_
 			}
 			else
 			{
-				log_err("Config setting %s is invalid, allowed options are: [ true, false, yes, no ]", conf_item->k);
+				log_err("Config setting %s is invalid, allowed options are: [ true, false, yes, no, 1, 0 ]", conf_item->k);
 				return false;
 			}
 			break;
@@ -507,6 +507,10 @@ int set_config_from_CLI(const char *key,
 		// Install new configuration
 		replace_config(&newconf);
 
+		// save to uci config
+		if(uci_set_value(new_item, value, true))
+			log_err("%s: Failed to save new config for: %s=%s", __func__, new_item->k, value);
+
 		// Print value
 		writeTOMLvalue(stdout, -1, new_item->t, &new_item->v);
 	}
@@ -539,7 +543,7 @@ int get_config_from_CLI(const char *key,
 		struct conf_item *item = get_conf_item(&config, i);
 
 		// Check if item.k is identical with key
-		if(strcmp(item->k, key) == 0)
+		if(key != NULL && strcmp(item->k, key) == 0)
 		{
 			exactMatch = true;
 			break;
--- a/src/config/config.c
+++ b/src/config/config.c
@@ -40,6 +40,8 @@ struct config config = { 0 };
 static bool config_initialized = false;
 uint8_t last_checksum[SHA256_DIGEST_SIZE] = { 0 };
 
+bool use_uci = true;
+
 // Private prototypes
 static bool port_in_use(const in_port_t port);
 static void reset_config_default(struct conf_item *conf_item);
@@ -1598,6 +1600,21 @@ bool readFTLconf(struct config *conf, co
 	// First, read the environment
 	getEnvVars();
 
+	if(use_uci) {
+		log_info("Using UCI config to configure");
+		uci_dhcp = init_uci_pkg("dhcp");
+		uci_pihole = init_uci_pkg("pihole");
+		uci_network = init_uci_pkg("network");
+
+		// read uci value
+		uci_get_config_values(conf, false);
+		write_static_hosts();
+		write_dnsmasq_config(conf, false, NULL);
+		write_custom_list();
+
+		return false;
+	}
+
 	// Try to read TOML config file
 	// If we cannot parse /etc/pihole.toml (due to missing or invalid syntax),
 	// we try to read the rotated files in /etc/pihole/config_backup starting at
@@ -1715,6 +1732,22 @@ bool getLogFilePath(void)
 	config.files.log.ftl.v.s = config.files.log.ftl.d.s;
 	config.files.log.ftl.c = validate_filepath;
 
+	uci_pihole = init_uci_pkg("pihole");
+	const char *use_toml = uci_get_string(uci_pihole, "@misc[0]", "toml_config");
+	if(use_toml != NULL && use_toml[0] == '1')
+		use_uci = false;
+
+	// read logfile location from uci
+	if(use_uci && uci_get_value(&config.files.log.ftl, "@files[0]", "log_ftl"))
+		config.files.log.ftl.v.s = config.files.log.ftl.d.s;
+
+	// cleaned here before parse_args
+	// will reallocate in readFTLconf
+	uci_clean_config();
+
+	if (use_uci)
+		return true;
+
 	// Check if the config file contains a different path
 	if(!getLogFilePathTOML())
 		return getLogFilePathLegacy(&config, NULL);
@@ -1737,6 +1770,9 @@ void set_blockingstatus(bool enabled)
 		return;
 
 	config.dns.blocking.active.v.b = enabled;
+	if(uci_set_value(&config.dns.blocking.active, enabled ? "1" : "0", true) != 0)
+		log_err("%s: failed to set UCI config", __func__);
+
 	writeFTLtoml(true);
 	raise(SIGHUP);
 }
@@ -1807,6 +1843,10 @@ void replace_config(struct config *newco
 
 void reread_config(void)
 {
+	if (use_uci) {
+		uci_get_config_values(&config, true);
+		return;
+	}
 
 	// Create checksum of config file
 	uint8_t checksum[SHA256_DIGEST_SIZE];
--- a/src/config/config.h
+++ b/src/config/config.h
@@ -43,6 +43,8 @@
 // Location of the legacy (pre-v6.0) config file
 #define GLOBALCONFFILE_LEGACY "/etc/pihole/pihole-FTL.conf"
 
+extern bool use_uci;
+
 union conf_value {
 	bool b;                                     // boolean value
 	int i;                                      // integer value
@@ -100,6 +102,7 @@ enum conf_type {
 #define FLAG_ENV_VAR               (1 << 4)
 #define FLAG_CONF_IMPORTED         (1 << 5)
 #define FLAG_READ_ONLY             (1 << 6)
+#define FLAG_PKG_DHCP              (1 << 7)
 
 struct conf_item {
 	const char *k;        // item Key
@@ -347,6 +350,7 @@ struct config {
 };
 
 extern struct config config;
+#include "config_uci.h"
 
 #define CONFIG_ELEMENTS (sizeof(config)/sizeof(struct conf_item))
 #define DEBUG_ELEMENTS (sizeof(config.debug)/sizeof(struct conf_item))
@@ -369,6 +373,9 @@ const char *get_conf_type_str(const enum
 void replace_config(struct config *newconf);
 void reread_config(void);
 
+// Defined in cli.c
+bool readStringValue(struct conf_item *conf_item, const char *value, struct config *newconf);
+
 // Defined in toml_reader.c
 bool readDebugSettings(void);
 void init_config_mutex(void);
--- a/src/config/dnsmasq_config.c
+++ b/src/config/dnsmasq_config.c
@@ -227,7 +227,7 @@ static void write_config_header(FILE *fp
 bool __attribute__((const)) write_dnsmasq_config(struct config *conf, bool test_config, char errbuf[ERRBUF_SIZE])
 {
 	// Early config checks
-	if(conf->dhcp.active.v.b)
+	if(!use_uci && conf->dhcp.active.v.b)
 	{
 		// Check if the addresses are valid
 		// The addresses should neither be 0.0.0.0 nor 255.255.255.255
@@ -363,7 +363,7 @@ bool __attribute__((const)) write_dnsmas
 		fputs("\n", pihole_conf);
 	}
 
-	if(strlen(conf->files.log.dnsmasq.v.s) > 0)
+	if(conf->files.log.dnsmasq.v.s != NULL && strlen(conf->files.log.dnsmasq.v.s) > 0)
 	{
 		fputs("# Specify the log file to use\n", pihole_conf);
 		fputs("# We set this even if logging is disabled to store warnings\n", pihole_conf);
@@ -430,7 +430,23 @@ bool __attribute__((const)) write_dnsmas
 	const char *interface = conf->dns.interface.v.s;
 	// Use eth0 as fallback interface if the interface is missing
 	if(strlen(interface) == 0)
-		interface = "eth0";
+		interface = "br-lan";
+
+	// split if interface have more than 1, max 4 ifaces
+	// if using conf->dns.interface.v.s directly,
+	// will only print 1 iface in cli config, so duplicate here
+	char *ifaces = strdup(interface); 
+	char *iface[4];
+	int count = 0; 
+	const char *ifname = NULL;
+	iface[count++] = ifaces;
+	for (char *p = ifaces; *p != '\0'; p++) {
+		if (*p == ',') {
+			*p = '\0';
+			if (count < 4)
+				iface[count++] = p + 1;
+		}
+	}
 
 	switch(conf->dns.listeningMode.v.listeningMode)
 	{
@@ -445,12 +461,17 @@ bool __attribute__((const)) write_dnsmas
 			break;
 		case LISTEN_SINGLE:
 			fputs("# Listen on one interface\n", pihole_conf);
-			fprintf(pihole_conf, "interface=%s\n", interface);
+			ifname = uci_get_string(uci_network, iface[0], "device");
+			fprintf(pihole_conf, "interface=%s\n", ifname ? ifname : iface[0]);
 			break;
 		case LISTEN_BIND:
-			fputs("# Bind to one interface\n", pihole_conf);
-			fprintf(pihole_conf, "interface=%s\n", interface);
+			fputs("# Bind to interface(s)\n", pihole_conf);
 			fputs("bind-interfaces\n", pihole_conf);
+			for (int i = 0; i < count; i++) {
+				ifname = uci_get_string(uci_network, iface[i], "device");
+				fprintf(pihole_conf, "interface=%s\n", ifname ? ifname : iface[i]);
+			}
+
 			break;
 		case LISTEN_NONE:
 			fputs("# No interface configuration applied, make sure to cover this yourself\n", pihole_conf);
@@ -458,6 +479,8 @@ bool __attribute__((const)) write_dnsmas
 	}
 	fputs("\n", pihole_conf);
 
+	free(ifaces);
+
 	// Add upstream DNS servers for reverse lookups
 	bool domain_revServer = false;
 	const unsigned int revServers = cJSON_GetArraySize(conf->dns.revServers.v.json);
@@ -532,11 +555,15 @@ bool __attribute__((const)) write_dnsmas
 		fputs("# DNS domain for both the DNS and DHCP server\n", pihole_conf);
 		if(!domain_revServer)
 		{
+			const char *local_dom = uci_get_string(uci_dhcp, "@dnsmasq[0]", "local");
 			fputs("# This DNS domain in purely local. FTL may answer queries from\n", pihole_conf);
 			fputs("# /etc/hosts or DHCP but should never forward queries on that\n", pihole_conf);
 			fputs("# domain to any upstream servers\n", pihole_conf);
 			fprintf(pihole_conf, "domain=%s\n", conf->dns.domain.v.s);
-			fprintf(pihole_conf, "local=/%s/\n\n", conf->dns.domain.v.s);
+			if(local_dom != NULL)
+				fprintf(pihole_conf, "local=%s\n", local_dom);
+			else
+				fprintf(pihole_conf, "local=/%s/\n\n", conf->dns.domain.v.s);
 		}
 		else
 		{
@@ -551,6 +578,7 @@ bool __attribute__((const)) write_dnsmas
 		fputs("# DHCP server setting\n", pihole_conf);
 		fputs("dhcp-authoritative\n", pihole_conf);
 		fprintf(pihole_conf, "dhcp-leasefile=%s\n", config.dhcp.leaseFile.v.s);
+		if(!use_uci) {
 		char start[INET_ADDRSTRLEN] = { 0 },
 		     end[INET_ADDRSTRLEN] = { 0 },
 		     router[INET_ADDRSTRLEN] = { 0 };
@@ -570,6 +598,16 @@ bool __attribute__((const)) write_dnsmas
 		if(strlen(conf->dhcp.leaseTime.v.s) > 0)
 			fprintf(pihole_conf, ",%s", conf->dhcp.leaseTime.v.s);
 		fprintf(pihole_conf, "\ndhcp-option=option:router,%s\n", router);
+		} else {
+			fputs("\n", pihole_conf);
+			fputs("dhcp-broadcast=tag:needs-broadcast\n", pihole_conf);
+			fputs("dhcp-ignore-names=tag:dhcp_bogus_hostname\n", pihole_conf);
+			fputs("dhcp-name-match=set:dhcp_bogus_hostname,localhost\n", pihole_conf);
+			fputs("dhcp-name-match=set:dhcp_bogus_hostname,wpad\n", pihole_conf);
+
+			write_config_dhcp(pihole_conf);
+			fputs("\n", pihole_conf);
+		}
 
 		if(conf->dhcp.rapidCommit.v.b)
 			fputs("dhcp-rapid-commit\n", pihole_conf);
@@ -589,7 +627,7 @@ bool __attribute__((const)) write_dnsmas
 			fputs("dhcp-option=option:dns-server,0.0.0.0,0.0.0.0,0.0.0.0\n", pihole_conf);
 		}
 
-		if(conf->dhcp.ipv6.v.b)
+		if(!use_uci && conf->dhcp.ipv6.v.b)
 		{
 			// Add dns-server option only if not already done above (dhcp.multiDNS)
 			if(conf->dhcp.multiDNS.v.b)
@@ -689,9 +727,11 @@ bool __attribute__((const)) write_dnsmas
 	}
 
 	// Add option for caching all DNS records
-	fputs("# Cache all DNS records\n", pihole_conf);
-	fputs("cache-rr=ANY\n", pihole_conf);
-	fputs("\n", pihole_conf);
+	if(conf->dns.cache.size.v.ui > 0) {
+		fputs("# Cache all DNS records\n", pihole_conf);
+		fputs("cache-rr=ANY\n", pihole_conf);
+		fputs("\n", pihole_conf);
+	}
 
 	// Add option for PCAP file recording
 	if(strlen(conf->files.pcap.v.s) > 0)
@@ -715,7 +755,12 @@ bool __attribute__((const)) write_dnsmas
 	fputs("# records are removed. Since ANY queries with forged source addresses can be used in DNS amplification attacks\n", pihole_conf);
 	fputs("# replies to ANY queries can be large) this defangs such attacks, whilst still supporting the\n", pihole_conf);
 	fputs("# one remaining possible use of ANY queries. See RFC 8482 para 4.3 for details.\n", pihole_conf);
-	fputs("filter-rr=ANY\n", pihole_conf);
+
+	const char *filter_rr = uci_get_string(uci_dhcp, "@dnsmasq[0]", "filter_rr");
+	if(filter_rr != NULL)
+		fprintf(pihole_conf, "filter-rr=%s\n", filter_rr);
+	else
+		fputs("filter-rr=ANY\n", pihole_conf);
 	fputs("\n", pihole_conf);
 
 	// Add additional config lines to disk (if present)
@@ -735,6 +780,8 @@ bool __attribute__((const)) write_dnsmas
 		fputs("#### Additional user configuration - END ####\n\n", pihole_conf);
 	}
 
+	write_dnsmasq_conf(pihole_conf);
+
 	// Flush config file to disk
 	fflush(pihole_conf);
 
--- a/src/config/inotify.c
+++ b/src/config/inotify.c
@@ -14,10 +14,11 @@
 // NAME_MAX
 #include <linux/limits.h>
 
-#define WATCHDIR "/etc/pihole"
+#define WATCHDIR "/tmp/etc/pihole"
 
 static int inotify_fd = -1;
 static int inotify_wd = -1;
+extern bool use_uci;
 
 static bool create_inotify_watcher(void)
 {
@@ -36,7 +37,11 @@ static bool create_inotify_watcher(void)
 	// - IN_MOVE: File was moved
 	// - IN_DELETE: File was deleted
 	// - IN_ONLYDIR: Race-free check of ensuring that the monitored object is a directory
-	inotify_wd = inotify_add_watch(inotify_fd, WATCHDIR, IN_CREATE | IN_CLOSE_WRITE | IN_MOVE | IN_DELETE | IN_ONLYDIR);
+	if (use_uci)
+		inotify_wd = inotify_add_watch(inotify_fd, "/etc/config", IN_CREATE | IN_CLOSE_WRITE | IN_MOVE | IN_DELETE | IN_ONLYDIR);
+	else
+		inotify_wd = inotify_add_watch(inotify_fd, WATCHDIR, IN_CREATE | IN_CLOSE_WRITE | IN_MOVE | IN_DELETE | IN_ONLYDIR);
+
 	if(inotify_wd == -1)
 	{
 		log_warn("Cannot add watching of "WATCHDIR" to inotify instance: %s", strerror(errno));
@@ -108,8 +113,14 @@ bool check_inotify_event(void)
 		{
 			// File opened for writing was closed
 			log_debug(DEBUG_INOTIFY, "File written: "WATCHDIR"/%s", event->name);
-			if(strcmp(event->name, "pihole.toml") == 0)
-				config_changed = true;
+			if (use_uci) {
+				if(strcmp(event->name, "dhcp") == 0 ||
+				   strcmp(event->name, "pihole") == 0)
+					config_changed = true;
+			} else {
+				if(strcmp(event->name, "pihole.toml") == 0)
+					config_changed = true;
+			}
 		}
 		else if(event->mask & IN_CREATE)
 		{
--- a/src/config/toml_helper.c
+++ b/src/config/toml_helper.c
@@ -29,6 +29,9 @@
 // Open the TOML file for reading or writing
 FILE * __attribute((malloc)) __attribute((nonnull(1))) openFTLtoml(const char *mode, const unsigned int version)
 {
+	if (use_uci)
+		return NULL;
+
 	// This should not happen, install a safeguard anyway to unveil
 	// possible future coding issues early on
 	if(mode[0] == 'w' && version != 0)
--- a/src/config/toml_reader.c
+++ b/src/config/toml_reader.c
@@ -105,6 +105,9 @@ bool readFTLtoml(struct config *oldconf,
                  toml_table_t *toml, const bool verbose, bool *restart,
                  const unsigned int version)
 {
+	if (use_uci)
+		return false;
+
 	// Parse lines in the config file if we did not receive a pointer to a TOML
 	// table from an imported Teleporter file
 	bool teleporter = (toml != NULL);
@@ -252,6 +255,9 @@ static toml_table_t *parseTOML(const uns
 
 bool getLogFilePathTOML(void)
 {
+	if (use_uci)
+		return true;
+
 	log_debug(DEBUG_CONFIG, "Reading TOML config file: log file path");
 
 	toml_table_t *conf = parseTOML(0);
--- a/src/config/toml_writer.c
+++ b/src/config/toml_writer.c
@@ -27,6 +27,9 @@ extern uint8_t last_checksum[SHA256_DIGE
 
 bool writeFTLtoml(const bool verbose)
 {
+	if (use_uci)
+		return false;
+
 	// Return early without writing if we are in config read-only mode
 	if(config.misc.readOnly.v.b)
 	{
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -406,6 +406,8 @@ void cleanup(const int ret)
 	char buffer[42] = { 0 };
 	format_time(buffer, 0, timer_elapsed_msec(EXIT_TIMER));
 	log_info("########## FTL terminated after%s (code %i)! ##########", buffer, ret);
+	clean_all_leftovers();
+	uci_clean_config();
 }
 
 static float last_clock = 0.0f;
--- a/src/files.c
+++ b/src/files.c
@@ -434,6 +434,9 @@ static int copy_file(const char *source,
 // Change ownership of file to pihole user
 bool chown_pihole(const char *path, struct passwd *pwd)
 {
+	if (use_uci)
+		return true;
+
 	// Get pihole user's UID and GID if not provided
 	if(pwd == NULL)
 	{
--- a/src/main.c
+++ b/src/main.c
@@ -73,8 +73,10 @@ int main (int argc, char *argv[])
 		log_info("Parsed config file "GLOBALTOMLPATH" successfully");
 
 	// Check if another FTL process is already running
-	if(another_FTL())
+	if(another_FTL()) {
+		uci_clean_config();
 		return EXIT_FAILURE;
+	}
 
 	// Set process priority
 	set_nice();
@@ -83,6 +85,7 @@ int main (int argc, char *argv[])
 	if(!init_shmem())
 	{
 		log_crit("Initialization of shared memory failed.");
+		uci_clean_config();
 		return EXIT_FAILURE;
 	}
 
