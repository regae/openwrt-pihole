--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -299,7 +299,6 @@ set(ObjList
         $<TARGET_OBJECTS:ftl_lua>
         $<TARGET_OBJECTS:tre-regex>
         $<TARGET_OBJECTS:syscalls>
-        $<TARGET_OBJECTS:tomlc99>
         $<TARGET_OBJECTS:config>
         $<TARGET_OBJECTS:tools>
         $<TARGET_OBJECTS:ntp>
--- a/src/api/config.c
+++ b/src/api/config.c
@@ -18,8 +18,6 @@
 #include "datastructure.h"
 // INT_MIN, INT_MAX, ...
 #include <limits.h>
-// writeFTLtoml()
-#include "config/toml_writer.h"
 // write_dnsmasq_config()
 #include "config/dnsmasq_config.h"
 // shm_lock()
@@ -855,9 +853,6 @@ static int api_config_patch(struct ftl_c
 		// Reload debug levels
 		set_debug_flags(&config);
 
-		// Store changed configuration to disk
-		writeFTLtoml(true);
-
 		// Rewrite HOSTS file if required
 		if(rewrite_hosts)
 			write_custom_list();
@@ -1080,9 +1075,6 @@ static int api_config_put_delete(struct
 	// Reload debug levels
 	set_debug_flags(&config);
 
-	// Store changed configuration to disk
-	writeFTLtoml(true);
-
 	// Rewrite HOSTS file if required
 	if(rewrite_hosts)
 		write_custom_list();
--- a/src/api/teleporter.c
+++ b/src/api/teleporter.c
@@ -774,10 +774,6 @@ static int process_received_tar_gz(struc
 		}
 	}
 
-	// Remove pihole.toml to prevent it from being imported on restart
-	if(remove(GLOBALTOMLPATH) != 0)
-		log_err("Unable to remove file \"%s\": %s", GLOBALTOMLPATH, strerror(errno));
-
 	// Free allocated memory
 	free_upload_data(data);
 
--- a/src/config/CMakeLists.txt
+++ b/src/config/CMakeLists.txt
@@ -25,12 +25,6 @@ set(sources
         password.h
         suggest.c
         suggest.h
-        toml_writer.c
-        toml_writer.h
-        toml_reader.c
-        toml_reader.h
-        toml_helper.c
-        toml_helper.h
         validator.c
         validator.h
         )
@@ -39,7 +33,6 @@ add_library(config OBJECT ${sources})
 
 target_compile_options(config PRIVATE ${EXTRAWARN})
 target_include_directories(config PRIVATE ${PROJECT_SOURCE_DIR}/src)
-add_subdirectory(tomlc99)
 if(NOT EXISTS "${PROJECT_SOURCE_DIR}/src/version.h")
     add_dependencies(config gen_version)
 endif()
--- a/src/config/cli.c
+++ b/src/config/cli.c
@@ -11,8 +11,6 @@
 #include "FTL.h"
 #include "config/cli.h"
 #include "config/config.h"
-#include "config/toml_helper.h"
-#include "config/toml_writer.h"
 #include "config/dnsmasq_config.h"
 #include "log.h"
 #include "datastructure.h"
@@ -376,6 +374,102 @@ bool readStringValue(struct conf_item *c
 	return true;
 }
 
+static void printValue(const enum conf_type t, union conf_value *v)
+{
+	switch(t)
+	{
+		case CONF_BOOL:
+		case CONF_ALL_DEBUG_BOOL:
+			printf("%s", v->b ? "true" : "false");
+			break;
+		case CONF_INT:
+			printf("%i", v->i);
+			break;
+		case CONF_UINT:
+		case CONF_ENUM_PRIVACY_LEVEL:
+			printf("%u", v->ui);
+			break;
+		case CONF_UINT16:
+			printf("%hu", v->u16);
+			break;
+		case CONF_LONG:
+			printf("%li", v->l);
+			break;
+		case CONF_ULONG:
+			printf("%lu", v->ul);
+			break;
+		case CONF_DOUBLE:
+			printf("%f", v->d);
+			break;
+		case CONF_STRING:
+		case CONF_STRING_ALLOCATED:
+			printf("%s", v->s);
+			break;
+		case CONF_ENUM_PTR_TYPE:
+			printf("%s", get_ptr_type_str(v->ptr_type));
+			break;
+		case CONF_ENUM_BUSY_TYPE:
+			printf("%s", get_busy_reply_str(v->busy_reply));
+			break;
+		case CONF_ENUM_BLOCKING_MODE:
+			printf("%s", get_blocking_mode_str(v->blocking_mode));
+			break;
+		case CONF_ENUM_REFRESH_HOSTNAMES:
+			printf("%s", get_refresh_hostnames_str(v->refresh_hostnames));
+			break;
+		case CONF_ENUM_LISTENING_MODE:
+			printf("%s", get_listeningMode_str(v->listeningMode));
+			break;
+		case CONF_ENUM_WEB_THEME:
+			printf("%s", get_web_theme_str(v->web_theme));
+			break;
+		case CONF_ENUM_TEMP_UNIT:
+			printf("%s", get_temp_unit_str(v->temp_unit));
+			break;
+		case CONF_STRUCT_IN_ADDR:
+		{
+			char addr4[INET_ADDRSTRLEN] = { 0 };
+			inet_ntop(AF_INET, &v->in_addr, addr4, INET_ADDRSTRLEN);
+			printf("%s", addr4);
+			break;
+		}
+		case CONF_STRUCT_IN6_ADDR:
+		{
+			char addr6[INET6_ADDRSTRLEN] = { 0 };
+			inet_ntop(AF_INET6, &v->in6_addr, addr6, INET6_ADDRSTRLEN);
+			printf("%s", addr6);
+			break;
+		}
+		case CONF_JSON_STRING_ARRAY:
+		{
+			// Start the array
+			printf("[");
+			const unsigned int elems = cJSON_GetArraySize(v->json);
+			if(elems > 0)
+				printf(" ");
+			for(unsigned int i = 0; i < elems; i++)
+			{
+				// Get and print the element
+				cJSON *item = cJSON_GetArrayItem(v->json, i);
+				printf("%s", item->valuestring);
+
+				// Add a comma if there is one more element to come
+				if(item->next)
+					printf(",");
+
+				printf(" ");
+			}
+			printf("]");
+			break;
+		}
+		case CONF_PASSWORD:
+		{
+			printf(PASSWORD_VALUE);
+			break;
+		}
+	}
+}
+
 int set_config_from_CLI(const char *key, const char *value)
 {
 	// Check if we are either
@@ -512,7 +606,7 @@ int set_config_from_CLI(const char *key,
 			log_err("Failed to save new config for: %s=%s", new_item->k, value);
 
 		// Print value
-		writeTOMLvalue(stdout, -1, new_item->t, &new_item->v);
+		printValue(new_item->t, &new_item->v);
 	}
 	else
 	{
@@ -521,11 +615,10 @@ int set_config_from_CLI(const char *key,
 		free_config(&newconf);
 
 		// Print value
-		writeTOMLvalue(stdout, -1, conf_item->t, &conf_item->v);
+		printValue(conf_item->t, &conf_item->v);
 	}
 
 	putchar('\n');
-	writeFTLtoml(false);
 	return OKAY;
 }
 
@@ -578,7 +671,7 @@ int get_config_from_CLI(const char *key,
 		if(conf_item-> f & FLAG_WRITE_ONLY)
 			puts("<write-only property>");
 		else
-			writeTOMLvalue(stdout, -1, conf_item->t, &conf_item->v);
+			printValue(conf_item->t, &conf_item->v);
 		putchar('\n');
 	}
 
--- a/src/config/config.c
+++ b/src/config/config.c
@@ -10,8 +10,6 @@
 
 #include "FTL.h"
 #include "config/config.h"
-#include "config/toml_reader.h"
-#include "config/toml_writer.h"
 #include "log.h"
 #include "log.h"
 // file_exists()
@@ -35,7 +33,6 @@
 
 struct config config = { 0 };
 static bool config_initialized = false;
-uint8_t last_checksum_toml[SHA256_DIGEST_SIZE] = { 0 };
 uint8_t last_checksum_dhcp[SHA256_DIGEST_SIZE] = { 0 };
 uint8_t last_checksum_pihole[SHA256_DIGEST_SIZE] = { 0 };
 
@@ -1856,25 +1853,6 @@ bool readFTLconf(struct config *conf, co
 	// First, read the environment
 	getEnvVars();
 
-	// Try to read TOML config file
-	if(readFTLtoml(NULL, conf, NULL, rewrite, NULL))
-	{
-		// read uci value
-		uci_get_config_values(conf, false);
-
-		// If successful, we write the config file back to disk
-		// to ensure that all options are present and comments
-		// about options deviating from the default are present
-		if(rewrite)
-		{
-			writeFTLtoml(true);
-			write_dnsmasq_config(conf, false, NULL);
-			write_custom_list();
-			write_static_hosts(conf->uci_ctx);
-		}
-		return true;
-	}
-
 	// Check if ports 80/TCP and 443/TCP are already in use
 	const in_port_t http_port = port_in_use(80) ? 8080 : 80;
 	const in_port_t https_port = port_in_use(443) ? 8443 : 443;
@@ -1908,12 +1886,8 @@ bool readFTLconf(struct config *conf, co
 	log_info("Initialised webserver ports at %d (HTTP) and %d (HTTPS), IPv6 support is %s",
 		http_port, https_port, have_ipv6 ? "enabled" : "disabled");
 
-	// Initialize the TOML config file
-	writeFTLtoml(true);
-	write_dnsmasq_config(conf, false, NULL);
 	write_custom_list();
-
-	return false;
+	return write_dnsmasq_config(conf, false, NULL);
 }
 
 bool getLogFilePath(void)
@@ -1937,10 +1911,6 @@ bool getLogFilePath(void)
 	if(uci_get_value(config.uci_ctx, &config.files.log.ftl))
 		config.files.log.ftl.v.s = config.files.log.ftl.d.s;
 
-	// Check if the config file contains a different path
-	if(!getLogFilePathTOML())
-		return false;
-
 	return true;
 }
 
@@ -1961,9 +1931,6 @@ void set_blockingstatus(bool enabled)
 	config.dns.blocking.active.v.b = enabled;
 	if(uci_set_value(config.uci_ctx, &config.dns.blocking.active, enabled ? "1" : "0", true) != 0)
 		log_err("failed to set UCI config blocking_active");
-
-	writeFTLtoml(true);
-	raise(SIGHUP);
 }
 
 const char * __attribute__ ((const)) get_conf_type_str(const enum conf_type type)
@@ -2036,11 +2003,9 @@ void reread_config(void)
 {
 
 	// Create checksum of config file
-	uint8_t checksum_toml[SHA256_DIGEST_SIZE] = { 0 };
 	uint8_t checksum_dhcp[SHA256_DIGEST_SIZE] = { 0 };
 	uint8_t checksum_pihole[SHA256_DIGEST_SIZE] = { 0 };
-	if(!sha256sum(GLOBALTOMLPATH, checksum_toml) ||
-	   !sha256sum(UCI_CONFIG_PIHOLE, checksum_pihole) ||
+	if(!sha256sum(UCI_CONFIG_PIHOLE, checksum_pihole) ||
 	   !sha256sum(UCI_CONFIG_DHCP, checksum_pihole))
 	{
 		log_err("Unable to create checksum of config files, not re-reading configuration");
@@ -2048,58 +2013,16 @@ void reread_config(void)
 	}
 
 	// Compare checksums
-	if(memcmp(checksum_toml, last_checksum_toml, SHA256_DIGEST_SIZE) == 0 &&
-	   memcmp(checksum_dhcp, last_checksum_dhcp, SHA256_DIGEST_SIZE) == 0 &&
+	if(memcmp(checksum_dhcp, last_checksum_dhcp, SHA256_DIGEST_SIZE) == 0 &&
 	   memcmp(checksum_pihole, last_checksum_pihole, SHA256_DIGEST_SIZE) == 0)
 	{
 		log_debug(DEBUG_CONFIG, "Checksum of config files has not changed, not re-reading configuration");
 		return;
 	}
 
-	log_info("Reloading config due to pihole.toml change");
-	struct config conf_copy;
-	duplicate_config(&conf_copy, &config);
-
-	// Read TOML config file
-	bool restart = false;
-	if(readFTLtoml(&config, &conf_copy, NULL, true, &restart))
-	{
-		// Install new configuration
-		log_debug(DEBUG_CONFIG, "Loaded configuration is valid, installing it");
-
-		// Check if the web pwhash has changed. If so, we invalidate
-		// all currently active web interface sessions
-		if(conf_copy.webserver.api.pwhash.v.s != NULL &&
-		   config.webserver.api.pwhash.v.s != NULL &&
-		   strcmp(conf_copy.webserver.api.pwhash.v.s, config.webserver.api.pwhash.v.s) != 0)
-			delete_all_sessions();
-
-		// Check if privacy level was reduced. If so, we need to restart FTL
-		if(conf_copy.misc.privacylevel.v.privacy_level < config.misc.privacylevel.v.privacy_level)
-		{
-			log_info("Privacy level was reduced, restarting FTL");
-			// We need to restart FTL
-			restart = true;
-		}
-
-		// Replace config struct used by FTL by newly loaded
-		// configuration. This swaps the pointers and frees
-		// the old config structure altogether
-		replace_config(&conf_copy);
-	}
-	else
-	{
-		// New configuration is invalid, restore old one
-		log_debug(DEBUG_CONFIG, "Modified config file is invalid, discarding and overwriting with current configuration");
-		free_config(&conf_copy);
-	}
-
+	log_info("Reloading config due to /etc/config/ changes");
 	uci_get_config_values(&config, true);
 
-	// Write the config file back to disk to ensure that all options and
-	// comments about options deviating from the default are present
-	writeFTLtoml(true);
-
 	// We do not write the dnsmasq config file here as this is done on every
 	// restart and changes would have no effect here
 
@@ -2107,14 +2030,8 @@ void reread_config(void)
 	// at any time and is automatically reloaded by dnsmasq
 	write_custom_list();
 
-	// If we need to restart FTL, we do so now
-	if(restart)
-	{
-		log_info("Restarting FTL due to config change");
-		exit_code = RESTART_FTL_CODE;
-		// Send SIGTERM to FTL
-		kill(main_pid(), SIGTERM);
-	}
+	// by removing toml function we lost
+	// the ability to restart pihole-FTL if privacelevel changes
 }
 
 // Very simple test of a port's availability by trying to bind a TCP socket to
--- a/src/config/config.h
+++ b/src/config/config.h
@@ -32,7 +32,6 @@
 // enum web_theme
 #include "api/theme.h"
 
-#define GLOBALTOMLPATH "/tmp/etc/pihole.toml"
 #define UCI_CONFIG_PIHOLE "/etc/config/pihole"
 #define UCI_CONFIG_DHCP "/etc/config/dhcp"
 
--- a/src/config/env.c
+++ b/src/config/env.c
@@ -600,54 +600,3 @@ bool __attribute__((nonnull(1,2,3))) rea
 
 	return true;
 }
-
-cJSON *read_forced_vars(const unsigned int version)
-{
-	// Create cJSON array to store forced variables
-	cJSON *env_vars = cJSON_CreateArray();
-
-	// Try to open default config file. Use fallback if not found
-	FILE *fp;
-	if((fp = openFTLtoml("r", version)) == NULL)
-	{
-		// Return empty cJSON array
-		return env_vars;
-	}
-
-	// Read file line by line until we get to the end of the file where the
-	// statistics are stored, specifically, the line starting with
-	// "# X entr{y is,ies are} forced through environment"
-	char line[LINE_MAX] = { 0 };
-	while(fgets(line, sizeof(line), fp) != NULL)
-	{
-		// Check if this is the line we are looking for
-		if(strncmp(line, "# ", 2) == 0)
-		{
-			// Check if this is the line we are looking for
-			if(strstr(line, "forced through environment:") != NULL)
-				break;
-		}
-	}
-
-	// Read the next lines to extract the variables
-	while(fgets(line, sizeof(line), fp) != NULL)
-	{
-		// Check if this is the line we are looking for
-		if(strncmp(line, "#   - ", 6) != 0)
-		{
-			// We are done, break out of the loop
-			break;
-		}
-
-		// else: Add the variable to the cJSON array
-		// Trim the string (remove leading "#   - " and trailing newline)
-		line[strcspn(line, "\n")] = '\0';
-		cJSON_AddItemToArray(env_vars, cJSON_CreateString(line + 6));
-	}
-
-	// Close file and release exclusive lock
-	closeFTLtoml(fp);
-
-	// Return cJSON array
-	return env_vars;
-}
--- a/src/config/env.h
+++ b/src/config/env.h
@@ -24,6 +24,5 @@
 void freeEnvVars(void);
 void printFTLenv(void);
 bool readEnvValue(struct conf_item *conf_item, struct config *newconf, cJSON *forced_vars, bool *reset)  __attribute__((nonnull(1,2,3)));
-cJSON *read_forced_vars(const unsigned int version);
 
 #endif //CONFIG_ENV_H
--- a/src/config/password.c
+++ b/src/config/password.c
@@ -22,9 +22,6 @@
 #include "webserver/x509.h"
 #endif
 
-// writeFTLtoml()
-#include "config/toml_writer.h"
-
 // crypto library
 #include <nettle/sha2.h>
 #include <nettle/base64.h>
@@ -429,7 +426,6 @@ enum password_result verify_password(con
 					free(config.webserver.api.pwhash.v.s);
 				config.webserver.api.pwhash.v.s = new_hash;
 				config.webserver.api.pwhash.t = CONF_STRING_ALLOCATED;
-				writeFTLtoml(true);
 				free(new_hash);
 			}
 
--- a/src/main.c
+++ b/src/main.c
@@ -65,11 +65,12 @@ int main (int argc, char *argv[])
 	// We configure real-time signals later (after dnsmasq has forked)
 	handle_signals();
 
-	// Process pihole.toml configuration file
-	// The file is rewritten after parsing to ensure that all
-	// settings are present and have a valid value
-	if(readFTLconf(&config, true))
-		log_info("Parsed config file "GLOBALTOMLPATH" successfully");
+	if(!readFTLconf(&config, true)) {
+		uci_cleanup(config.uci_ctx);
+		return EXIT_FAILURE;
+	}
+
+	log_info("Parsed config file successfully");
 
 	// Check if another FTL process is already running
 	if(another_FTL()) {
--- a/src/zip/teleporter.c
+++ b/src/zip/teleporter.c
@@ -21,12 +21,6 @@
 #include <dirent.h>
 // sqlite3
 #include "database/sqlite3.h"
-// toml_parse()
-#include "config/tomlc99/toml.h"
-// readFTLtoml()
-#include "config/toml_reader.h"
-// writeFTLtoml()
-#include "config/toml_writer.h"
 // write_dnsmasq_config()
 #include "config/dnsmasq_config.h"
 // lock_shm(), unlock_shm()
@@ -65,7 +59,6 @@ static const char *ftl_tables[] = {
 
 // List of files to process from a Teleporter ZIP archive
 static const char *extract_files[] = {
-	"etc/pihole/pihole.toml",
 	"etc/pihole/dhcp.leases",
 	"etc/pihole/gravity.db"
 };
@@ -153,6 +146,8 @@ const char *generate_teleporter_zip(mz_z
 {
 	// Initialize ZIP archive
 	memset(zip, 0, sizeof(*zip));
+	const char *file_comment;
+	const char *file_path;
 
 	// Start with 64KB allocation size (pihole.TOML is slightly larger than 32KB
 	// at the time of writing thjs)
@@ -161,15 +156,6 @@ const char *generate_teleporter_zip(mz_z
 		return "Failed creating heap ZIP archive";
 	}
 
-	// Add pihole.toml to the ZIP archive
-	const char *file_comment = "Pi-hole's configuration";
-	const char *file_path = GLOBALTOMLPATH;
-	if(!mz_zip_writer_add_file(zip, file_path+1, file_path, file_comment, (uint16_t)strlen(file_comment), MZ_BEST_COMPRESSION))
-	{
-		mz_zip_writer_end(zip);
-		return "Failed to add "GLOBALTOMLPATH" to heap ZIP archive!";
-	}
-
 	// Add /etc/hosts to the ZIP archive
 	file_comment = "System's HOSTS file";
 	file_path = "/etc/hosts";
@@ -181,7 +167,7 @@ const char *generate_teleporter_zip(mz_z
 
 	// Add /etc/pihole/dhcp.lease to the ZIP archive if it exists
 	file_comment = "DHCP leases file";
-	file_path = "/etc/pihole/dhcp.leases";
+	file_path = config.dhcp.leaseFile.v.s;
 	if(file_exists(file_path) && !mz_zip_writer_add_file(zip, file_path+1, file_path, file_comment, (uint16_t)strlen(file_comment), MZ_BEST_COMPRESSION))
 	{
 		mz_zip_writer_end(zip);
@@ -289,55 +275,6 @@ const char *generate_teleporter_zip(mz_z
 	return NULL;
 }
 
-static const char *test_and_import_pihole_toml(void *ptr, size_t size, char * const hint)
-{
-	// Check if the file is empty
-	if(size == 0)
-		return "File etc/pihole/pihole.toml in ZIP archive is empty";
-
-	// Create a memory copy that is null-terminated
-	char *buffer = calloc(size+1, sizeof(char));
-	if(buffer == NULL)
-		return "Failed to allocate memory for null-terminated copy of etc/pihole/pihole.toml in ZIP archive";
-	memcpy(buffer, ptr, size);
-	buffer[size] = '\0';
-
-	// Check if the file is a valid TOML file
-	toml_table_t *toml = toml_parse(buffer, hint, ERRBUF_SIZE);
-	if(toml == NULL)
-	{
-		free(buffer);
-		return "File etc/pihole/pihole.toml in ZIP archive is not a valid TOML file";
-	}
-	free(buffer);
-
-	// Check if the file contains a valid configuration for Pi-hole by parsing it into
-	// a temporary config struct (teleporter_config)
-	struct config teleporter_config = { 0 };
-	duplicate_config(&teleporter_config, &config);
-	if(!readFTLtoml(NULL, &teleporter_config, toml, true, NULL))
-		return "File etc/pihole/pihole.toml in ZIP archive contains invalid TOML configuration";
-
-	// Test dnsmasq config in the imported configuration
-	// The dnsmasq configuration will be overwritten if the test succeeds
-	if(!write_dnsmasq_config(&teleporter_config, true, hint))
-		return "File etc/pihole/pihole.toml in ZIP archive contains invalid dnsmasq configuration";
-
-	// When we reach this point, we know that the file is a valid TOML file and contains
-	// a valid configuration for Pi-hole. We can now safely overwrite the current
-	// configuration with the one from the ZIP archive
-
-	// Install new configuration
-	replace_config(&teleporter_config);
-
-	// Write new pihole.toml to disk, the dnsmaq config was already written above
-	// Also write the custom list to disk
-	writeFTLtoml(true);
-	write_custom_list();
-
-	return NULL;
-}
-
 static const char *import_dhcp_leases(void *ptr, size_t size, char * const hint)
 {
 	// We do not check if the file is empty here, as an empty dhcp.leases file is valid
@@ -586,29 +523,8 @@ const char *read_teleporter_zip(uint8_t
 		// Process file
 		const char *import_tables[ArraySize(gravity_tables)] = { NULL };
 		size_t num_tables = 0u;
-		// Is this "etc/pihole/pihole.toml" ?
-		if(strcmp(file_stat.m_filename, extract_files[0]) == 0)
-		{
-			// Check whether we should import this file
-			if(import != NULL && !JSON_KEY_TRUE(import, "config"))
-			{
-				log_info("Ignoring file %s in Teleporter archive (not in import list)", file_stat.m_filename);
-				free(ptr);
-				continue;
-			}
-
-			// Import Pi-hole configuration
-			memset(hint, 0, ERRBUF_SIZE);
-			const char *err = test_and_import_pihole_toml(ptr, file_stat.m_uncomp_size, hint);
-			if(err != NULL)
-			{
-				free(ptr);
-				return err;
-			}
-			log_debug(DEBUG_CONFIG, "Imported Pi-hole configuration: %s", file_stat.m_filename);
-		}
 		// Is this "etc/pihole/dhcp.leases"?
-		else if(strcmp(file_stat.m_filename, extract_files[1]) == 0)
+		if(strcmp(file_stat.m_filename, "etc/pihole/dhcp.leases") == 0)
 		{
 			// Check whether we should import this file
 			if(import != NULL && !JSON_KEY_TRUE(import, "dhcp_leases"))
