--- a/advanced/Scripts/database_migration/gravity-db.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/database_migration/gravity-db.sh	2023-11-25 10:45:52.000000000 +0700
@@ -10,7 +10,7 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-readonly scriptPath="/etc/.pihole/advanced/Scripts/database_migration/gravity"
+readonly scriptPath="/usr/lib/pihole/database_migration/gravity"
 
 upgrade_gravityDB(){
 	local database piholeDir auditFile version
--- a/advanced/Scripts/list.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/list.sh	2023-11-25 10:45:52.000000000 +0700
@@ -13,15 +13,9 @@
 # Globals
 piholeDir="/etc/pihole"
 GRAVITYDB="${piholeDir}/gravity.db"
-# Source pihole-FTL from install script
-pihole_FTL="${piholeDir}/pihole-FTL.conf"
-if [[ -f "${pihole_FTL}" ]]; then
-    source "${pihole_FTL}"
-fi
-
-# Set this only after sourcing pihole-FTL.conf as the gravity database path may
-# have changed
-gravityDBfile="${GRAVITYDB}"
+
+GDB="$(/sbin/uci -q get pihole.@pihole[0].gravitydb)"
+gravityDBfile="${GDB:-$GRAVITYDB}"
 
 noReloadRequested=false
 addmode=true
@@ -37,7 +31,7 @@ declare -i domaincount
 domaincount=0
 reload=false
 
-colfile="/opt/pihole/COL_TABLE"
+colfile="/usr/lib/pihole/COL_TABLE"
 source ${colfile}
 
 # IDs are hard-wired to domain interpretation in the gravity database scheme
--- a/advanced/Scripts/pihole-reenable.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/pihole-reenable.sh	2023-11-25 10:45:52.000000000 +0700
@@ -17,7 +17,7 @@
 # This ensures that pihole ends up in the correct state after a sequence of
 # commands suchs as: `pihole disable 30s; pihole enable; pihole disable`
 
-readonly PI_HOLE_BIN_DIR="/usr/local/bin"
+readonly PI_HOLE_BIN_DIR="/usr/bin"
 
 sleep "${1}"
 "${PI_HOLE_BIN_DIR}"/pihole enable
--- a/advanced/Scripts/piholeARPTable.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/piholeARPTable.sh	2023-11-25 10:45:52.000000000 +0700
@@ -10,25 +10,13 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-coltable="/opt/pihole/COL_TABLE"
+coltable="/usr/lib/pihole/COL_TABLE"
 if [[ -f ${coltable} ]]; then
     source ${coltable}
 fi
 
-# Determine database location
-# Obtain DBFILE=... setting from pihole-FTL.db
-# Constructed to return nothing when
-# a) the setting is not present in the config file, or
-# b) the setting is commented out (e.g. "#DBFILE=...")
-FTLconf="/etc/pihole/pihole-FTL.conf"
-if [ -e "$FTLconf" ]; then
-    DBFILE="$(sed -n -e 's/^\s*DBFILE\s*=\s*//p' ${FTLconf})"
-fi
-# Test for empty string. Use standard path in this case.
-if [ -z "$DBFILE" ]; then
-    DBFILE="/etc/pihole/pihole-FTL.db"
-fi
-
+DBF="$(uci -q get pihole.@pihole[0].dbfile)"
+DBFILE="${DBF:-/etc/pihole/pihole-FTL.db}"
 
 flushARP(){
     local output
--- a/advanced/Scripts/piholeLogFlush.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/piholeLogFlush.sh	2023-11-25 10:45:52.000000000 +0700
@@ -8,65 +8,36 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-colfile="/opt/pihole/COL_TABLE"
+colfile="/usr/lib/pihole/COL_TABLE"
 source ${colfile}
 
-# In case we're running at the same time as a system logrotate, use a
-# separate logrotate state file to prevent stepping on each other's
-# toes.
-STATEFILE="/var/lib/logrotate/pihole"
-
-# Determine database location
-# Obtain DBFILE=... setting from pihole-FTL.db
-# Constructed to return nothing when
-# a) the setting is not present in the config file, or
-# b) the setting is commented out (e.g. "#DBFILE=...")
-FTLconf="/etc/pihole/pihole-FTL.conf"
-if [ -e "$FTLconf" ]; then
-    DBFILE="$(sed -n -e 's/^\s*DBFILE\s*=\s*//p' ${FTLconf})"
-fi
-# Test for empty string. Use standard path in this case.
-if [ -z "$DBFILE" ]; then
-    DBFILE="/etc/pihole/pihole-FTL.db"
-fi
+DBF="$(uci -q get pihole @pihole[0] dbfile)"
+DBFILE="${DBF:-/etc/pihole/pihole-FTL.db}"
 
 if [[ "$*" != *"quiet"* ]]; then
     echo -ne "  ${INFO} Flushing /var/log/pihole/pihole.log ..."
 fi
 if [[ "$*" == *"once"* ]]; then
     # Nightly logrotation
-    if command -v /usr/sbin/logrotate >/dev/null; then
-        # Logrotate once
-        /usr/sbin/logrotate --force --state "${STATEFILE}" /etc/pihole/logrotate
-    else
-        # Copy pihole.log over to pihole.log.1
-        # and empty out pihole.log
-        # Note that moving the file is not an option, as
-        # dnsmasq would happily continue writing into the
-        # moved file (it will have the same file handler)
-        cp -p /var/log/pihole/pihole.log /var/log/pihole/pihole.log.1
-        echo " " > /var/log/pihole/pihole.log
-        chmod 640 /var/log/pihole/pihole.log
-    fi
+    # Note that moving the file is not an option, as
+    # dnsmasq would happily continue writing into the
+    # moved file (it will have the same file handler)
+    cp -p /var/log/pihole/pihole.log /var/log/pihole/pihole.log.1
+    echo " " > /var/log/pihole/pihole.log
+    chmod 644 /var/log/pihole/pihole.log
 else
     # Manual flushing
-    if command -v /usr/sbin/logrotate >/dev/null; then
-        # Logrotate twice to move all data out of sight of FTL
-        /usr/sbin/logrotate --force --state "${STATEFILE}" /etc/pihole/logrotate; sleep 3
-        /usr/sbin/logrotate --force --state "${STATEFILE}" /etc/pihole/logrotate
-    else
-        # Flush both pihole.log and pihole.log.1 (if existing)
-        echo " " > /var/log/pihole/pihole.log
-        if [ -f /var/log/pihole/pihole.log.1 ]; then
-            echo " " > /var/log/pihole/pihole.log.1
-            chmod 640 /var/log/pihole/pihole.log.1
-        fi
+    # Flush both pihole.log and pihole.log.1 (if existing)
+    echo " " > /var/log/pihole/pihole.log
+    if [ -f /var/log/pihole/pihole.log.1 ]; then
+        echo " " > /var/log/pihole/pihole.log.1
+        chmod 644 /var/log/pihole/pihole.log.1
     fi
     # Delete most recent 24 hours from FTL's database, leave even older data intact (don't wipe out all history)
     deleted=$(pihole-FTL sqlite3 -ni "${DBFILE}" "DELETE FROM query_storage WHERE timestamp >= strftime('%s','now')-86400; select changes() from query_storage limit 1")
 
     # Restart pihole-FTL to force reloading history
-    sudo pihole restartdns
+    /etc/init.d/pihole-FTL restart
 fi
 
 if [[ "$*" != *"quiet"* ]]; then
--- a/advanced/Scripts/query.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/query.sh	2023-11-25 10:45:52.000000000 +0700
@@ -15,13 +15,13 @@
 # Please see LICENSE file for your rights under this license.
 
 # Globals
-PI_HOLE_INSTALL_DIR="/opt/pihole"
+PI_HOLE_INSTALL_DIR="/usr/lib/pihole"
 max_results="20"
 partial="false"
 domain=""
 
 # Source color table
-colfile="/opt/pihole/COL_TABLE"
+colfile="/usr/lib/pihole/COL_TABLE"
 . "${colfile}"
 
 # Source api functions
--- a/advanced/Scripts/utils.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/advanced/Scripts/utils.sh	2023-11-25 10:45:52.000000000 +0700
@@ -86,7 +86,7 @@ removeKey() {
 #######################
 getFTLPIDFile() {
   local FTLCONFFILE="/etc/pihole/pihole-FTL.conf"
-  local DEFAULT_PID_FILE="/run/pihole-FTL.pid"
+  local DEFAULT_PID_FILE="$(uci_get pihole @pihole[0] pidfile)"
   local FTL_PID_FILE
 
   if [ -s "${FTLCONFFILE}" ]; then
@@ -94,7 +94,7 @@ getFTLPIDFile() {
     FTL_PID_FILE="$({ grep '^PIDFILE=' "${FTLCONFFILE}" || echo "${DEFAULT_PID_FILE}"; } | cut -d'=' -f2-)"
   else
     # if there is no pihole-FTL.conf, use the default path
-    FTL_PID_FILE="${DEFAULT_PID_FILE}"
+    FTL_PID_FILE="${DEFAULT_PID_FILE:-/var/run/pihole-FTL.pid}"
   fi
 
   echo "${FTL_PID_FILE}"
--- a/advanced/Scripts/version.sh
+++ b/advanced/Scripts/version.sh
@@ -18,41 +18,19 @@
 if [ -f ${cachedVersions} ]; then
     # shellcheck disable=SC1090
     . "$cachedVersions"
-else
-    echo "Could not find /etc/pihole/versions. Running update now."
-    pihole updatechecker
-    # shellcheck disable=SC1090
-    . "$cachedVersions"
 fi
 
 main() {
-    local details
-    details=false
+    local CORE_VERSION
+    local WEB_VERSION
+    local FTL_VERSION
+    CORE_VERSION=$(grep Version /usr/lib/opkg/info/pihole.control | awk '{print $2}')
+    WEB_VERSION=$(grep Version /usr/lib/opkg/info/pihole-web.control | awk '{print $2}')
+    FTL_VERSION=$(grep Version /usr/lib/opkg/info/pihole-FTL.control | awk '{print $2}')
 
-    # Automatically show detailed information if
-    # at least one of the components is not on master branch
-    if [ ! "${CORE_BRANCH}" = "master" ] || [ ! "${WEB_BRANCH}" = "master" ] || [ ! "${FTL_BRANCH}" = "master" ] ; then
-        details=true
-    fi
-
-    if [ "${details}" = true ]; then
-        echo "Core"
-        echo "    Version is ${CORE_VERSION:=N/A} (Latest: ${GITHUB_CORE_VERSION:=N/A})"
-        echo "    Branch is ${CORE_BRANCH:=N/A}"
-        echo "    Hash is ${CORE_HASH:=N/A} (Latest: ${GITHUB_CORE_HASH:=N/A})"
-        echo "Web"
-        echo "    Version is ${WEB_VERSION:=N/A} (Latest: ${GITHUB_WEB_VERSION:=N/A})"
-        echo "    Branch is ${WEB_BRANCH:=N/A}"
-        echo "    Hash is ${WEB_HASH:=N/A} (Latest: ${GITHUB_WEB_HASH:=N/A})"
-        echo "FTL"
-        echo "    Version is ${FTL_VERSION:=N/A} (Latest: ${GITHUB_FTL_VERSION:=N/A})"
-        echo "    Branch is ${FTL_BRANCH:=N/A}"
-        echo "    Hash is ${FTL_HASH:=N/A} (Latest: ${GITHUB_FTL_HASH:=N/A})"
-    else
-        echo "Core version is ${CORE_VERSION:=N/A} (Latest: ${GITHUB_CORE_VERSION:=N/A})"
-        echo "Web version is ${WEB_VERSION:=N/A} (Latest: ${GITHUB_WEB_VERSION:=N/A})"
-        echo "FTL version is ${FTL_VERSION:=N/A} (Latest: ${GITHUB_FTL_VERSION:=N/A})"
-    fi
+    echo "Core version is ${CORE_VERSION:=N/A}"
+    echo "Web version is ${WEB_VERSION:=N/A}"
+    echo "FTL version is ${FTL_VERSION:=N/A}"
 }
 
 main
--- a/gravity.sh	2023-11-18 18:31:11.000000000 +0700
+++ b/gravity.sh	2023-11-25 10:46:47.000000000 +0700
@@ -13,7 +13,7 @@
 
 export LC_ALL=C
 
-PI_HOLE_SCRIPT_DIR="/opt/pihole"
+PI_HOLE_SCRIPT_DIR="/usr/lib/pihole"
 # Source utils.sh for GetFTLConfigValue
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck disable=SC1090
@@ -23,10 +23,10 @@ coltable="${PI_HOLE_SCRIPT_DIR}/COL_TABL
 # shellcheck disable=SC1090
 . "${coltable}"
 # shellcheck disable=SC1091
-. "/etc/.pihole/advanced/Scripts/database_migration/gravity-db.sh"
+. "/usr/lib/pihole/database_migration/gravity-db.sh"
 
 basename="pihole"
-PIHOLE_COMMAND="/usr/local/bin/${basename}"
+PIHOLE_COMMAND="/usr/bin/${basename}"
 
 piholeDir="/etc/${basename}"
 
@@ -36,14 +36,10 @@ blacklistFile="${piholeDir}/blacklist.tx
 regexFile="${piholeDir}/regex.list"
 adListFile="${piholeDir}/adlists.list"
 
-localList="${piholeDir}/local.list"
-VPNList="/etc/openvpn/ipp.txt"
-
-piholeGitDir="/etc/.pihole"
 GRAVITYDB=$(getFTLConfigValue files.gravity)
 GRAVITY_TMPDIR=$(getFTLConfigValue files.gravity_tmp)
-gravityDBschema="${piholeGitDir}/advanced/Templates/gravity.db.sql"
-gravityDBcopy="${piholeGitDir}/advanced/Templates/gravity_copy.sql"
+gravityDBschema="${PI_HOLE_SCRIPT_DIR}/Templates/gravity.db.sql"
+gravityDBcopy="${PI_HOLE_SCRIPT_DIR}/Templates/gravity_copy.sql"
 
 domainsExtension="domains"
 curl_connect_timeout=10
@@ -96,10 +92,15 @@ gravity_swap_databases() {
   echo -ne "  ${INFO} ${str}..."
 
   # Swap databases and remove or conditionally rename old database
+  if command -v stat; then
   # Number of available blocks on disk
   availableBlocks=$(stat -f --format "%a" "${gravityDIR}")
   # Number of blocks, used by gravity.db
   gravityBlocks=$(stat --format "%b" ${gravityDBfile})
+  else
+    availableBlocks=1
+    gravityBlocks=1
+  fi
   # Only keep the old database if available disk space is at least twice the size of the existing gravity.db.
   # Better be safe than sorry...
   oldAvail=false
@@ -115,6 +116,7 @@ gravity_swap_databases() {
   if $oldAvail; then
     echo -e "  ${TICK} The old database remains available"
   fi
+  command -v stat || echo -e "  ${INFO} Please install coreutils-stat to backup old Database"
 }
 
 # Update timestamp when the gravity table was last updated successfully
@@ -299,15 +301,13 @@ migrate_to_database() {
 
 # Determine if DNS resolution is available before proceeding
 gravity_CheckDNSResolutionAvailable() {
-  local lookupDomain="pi.hole"
-
-  # Determine if $localList does not exist, and ensure it is not empty
-  if [[ ! -e "${localList}" ]] || [[ -s "${localList}" ]]; then
-    lookupDomain="raw.githubusercontent.com"
-  fi
+  local lookupDomain="raw.githubusercontent.com"
+  local cmd="$(command -v getent)"
+  cmd="${cmd:+${cmd##*/} hosts}"
+  command -v timeout &> /dev/null && timeoutCMD="timeout"
 
   # Determine if $lookupDomain is resolvable
-  if timeout 4 getent hosts "${lookupDomain}" &> /dev/null; then
+  if ${timeoutCMD:+$timeoutCMD 4} ${cmd:-host} "${lookupDomain}" &> /dev/null; then
     # Print confirmation of resolvability if it had previously failed
     if [[ -n "${secs:-}" ]]; then
       echo -e "${OVER}  ${TICK} DNS resolution is now available\\n"
@@ -321,7 +321,7 @@ gravity_CheckDNSResolutionAvailable() {
   # If the /etc/resolv.conf contains resolvers other than 127.0.0.1 then the local dnsmasq will not be queried and pi.hole is NXDOMAIN.
   # This means that even though name resolution is working, the getent hosts check fails and the holddown timer keeps ticking and eventually fails
   # So we check the output of the last command and if it failed, attempt to use dig +short as a fallback
-  if timeout 4 dig +short "${lookupDomain}" &> /dev/null; then
+  if ${timeoutCMD:+$timeoutCMD 4} dig +short "${lookupDomain}" &> /dev/null; then
     if [[ -n "${secs:-}" ]]; then
       echo -e "${OVER}  ${TICK} DNS resolution is now available\\n"
     fi
@@ -342,7 +342,7 @@ gravity_CheckDNSResolutionAvailable() {
   # Ensure DNS server is given time to be resolvable
   secs="120"
   echo -ne "  ${INFO} Time until retry: ${secs}"
-  until timeout 1 getent hosts "${lookupDomain}" &> /dev/null; do
+  until ${timeoutCMD:+$timeoutCMD 1} ${cmd:-host} "${lookupDomain}" &> /dev/null; do
     [[ "${secs:-}" -eq 0 ]] && break
     echo -ne "${OVER}  ${INFO} Time until retry: ${secs}"
     : $((secs--))
@@ -474,12 +474,19 @@ gravity_DownloadBlocklists() {
 
 compareLists() {
   local adlistID="${1}" target="${2}"
+  local commands suffix
+  local cmd=$(command -v sha1sum)
+  cmd=${cmd:-sha256sum}
+
+  #check GNU version
+  $cmd --version > /dev/null 2>&1 && commands=${cmd:+$cmd -c --status --strict} || commands=${cmd:+$cmd -c -s}
+  suffix="sha$(tr -d -c 0-9 <<< $cmd)"
 
   # Verify checksum when an older checksum exists
-  if [[ -s "${target}.sha1" ]]; then
-    if ! sha1sum --check --status --strict "${target}.sha1"; then
+  if [[ -s "${target}.${suffix}" ]]; then
+    if ! $commands "${target}.${suffix}"; then
       # The list changed upstream, we need to update the checksum
-      sha1sum "${target}" > "${target}.sha1"
+      $commands "${target}" > "${target}.${suffix}"
       echo "  ${INFO} List has been updated"
       database_adlist_status "${adlistID}" "1"
     else
@@ -488,7 +495,7 @@ compareLists() {
     fi
   else
     # No checksum available, create one for comparing on the next run
-    sha1sum "${target}" > "${target}.sha1"
+    $cmd "${target}" > "${target}.${suffix}"
     # We assume here it was changed upstream
     database_adlist_status "${adlistID}" "1"
   fi
@@ -498,6 +505,7 @@ compareLists() {
 gravity_DownloadBlocklistFromUrl() {
   local url="${1}" adlistID="${2}" saveLocation="${3}" target="${4}" compression="${5}" gravity_type="${6}"
   local heisenbergCompensator="" listCurlBuffer str httpCode success="" ip cmd_ext
+  local dnsserver
 
   # Create temp file to store content on disk instead of RAM
   # We don't use '--suffix' here because not all implementations of mktemp support it, e.g. on Alpine
@@ -539,11 +547,13 @@ gravity_DownloadBlocklistFromUrl() {
   esac
 
   if [[ "${blocked}" == true ]]; then
-    printf -v ip_addr "%s" "${PIHOLE_DNS_1%#*}"
-    if [[ ${PIHOLE_DNS_1} != *"#"* ]]; then
+    dnsserver="$(uci -q get dhcp.@dnsmasq[0].server)"
+    dnsserver="${dnsserver%% *}"
+    printf -v ip_addr "%s" "${dnsserver%#*}"
+    if [[ ${dnsserver} != *"#"* ]]; then
       port=53
     else
-      printf -v port "%s" "${PIHOLE_DNS_1#*#}"
+      printf -v port "%s" "${dnsserver#*#}"
     fi
     ip=$(dig "@${ip_addr}" -p "${port}" +short "${domain}" | tail -1)
     if [[ $(echo "${url}" | awk -F '://' '{print $1}') = "https" ]]; then
@@ -551,7 +561,7 @@ gravity_DownloadBlocklistFromUrl() {
     else port=80
     fi
     bad_list=$(pihole -q -adlist "${domain}" | head -n1 | awk -F 'Match found in ' '{print $2}')
-    echo -e "${OVER}  ${CROSS} ${str} ${domain} is blocked by ${bad_list%:}. Using DNS on ${PIHOLE_DNS_1} to download ${url}";
+    echo -e "${OVER}  ${CROSS} ${str} ${domain} is blocked by ${bad_list%:}. Using DNS on ${dnsserver} to download ${url}";
     echo -ne "  ${INFO} ${str} Pending..."
     cmd_ext="--resolve $domain:$port:$ip"
   fi
@@ -686,18 +696,6 @@ gravity_ShowCount() {
   gravity_Table_Count "vw_regex_whitelist" "regex allowed filters"
 }
 
-# Create "localhost" entries into hosts format
-gravity_generateLocalList() {
-  # Empty $localList if it already exists, otherwise, create it
-  echo "### Do not modify this file, it will be overwritten by pihole -g" > "${localList}"
-  chmod 644 "${localList}"
-
-  # Add additional LAN hosts provided by OpenVPN (if available)
-  if [[ -f "${VPNList}" ]]; then
-    awk -F, '{printf $2"\t"$1".vpn\n"}' "${VPNList}" >> "${localList}"
-  fi
-}
-
 # Trap Ctrl-C
 gravity_Trap() {
   trap '{ echo -e "\\n\\n  ${INFO} ${COL_LIGHT_RED}User-abort detected${COL_NC}"; gravity_Cleanup "error"; }' INT
@@ -884,9 +882,6 @@ if ! gravity_DownloadBlocklists; then
   exit 1
 fi
 
-# Create local.list
-gravity_generateLocalList
-
 # Update gravity timestamp
 update_gravity_timestamp
 
--- a/pihole	2023-11-18 18:31:11.000000000 +0700
+++ b/pihole	2023-11-25 10:45:52.000000000 +0700
@@ -9,18 +9,19 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-readonly PI_HOLE_SCRIPT_DIR="/opt/pihole"
+readonly PI_HOLE_SCRIPT_DIR="/usr/lib/pihole"
 
 # PI_HOLE_BIN_DIR is not readonly here because in some functions (checkout),
 # they might get set again when the installer is sourced. This causes an
 # error due to modifying a readonly variable.
-PI_HOLE_BIN_DIR="/usr/local/bin"
+PI_HOLE_BIN_DIR="/usr/bin"
 
 readonly colfile="${PI_HOLE_SCRIPT_DIR}/COL_TABLE"
 source "${colfile}"
 
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 source "${utilsfile}"
+source /lib/config/uci.sh
 
 versionsfile="/etc/pihole/versions"
 if [ -f "${versionsfile}" ]; then
@@ -95,25 +96,6 @@ arpFunc() {
   exit 0
 }
 
-updatePiholeFunc() {
-  if [ -n "${DOCKER_VERSION}" ]; then
-    unsupportedFunc
-  else
-    shift
-    "${PI_HOLE_SCRIPT_DIR}"/update.sh "$@"
-    exit 0
-  fi
-}
-
-reconfigurePiholeFunc() {
-  if [ -n "${DOCKER_VERSION}" ]; then
-    unsupportedFunc
-  else
-    /etc/.pihole/automated\ install/basic-install.sh --reconfigure
-    exit 0;
-  fi
-}
-
 updateGravityFunc() {
   exec "${PI_HOLE_SCRIPT_DIR}"/gravity.sh "$@"
 }
@@ -124,21 +106,6 @@ queryFunc() {
   exit 0
 }
 
-chronometerFunc() {
-  echo "Chronometer is gone, use PADD (https://github.com/pi-hole/PADD)"
-  exit 0
-}
-
-
-uninstallFunc() {
-  if [ -n "${DOCKER_VERSION}" ]; then
-    unsupportedFunc
-  else
-    "${PI_HOLE_SCRIPT_DIR}"/uninstall.sh
-    exit 0
-  fi
-}
-
 versionFunc() {
   exec "${PI_HOLE_SCRIPT_DIR}"/version.sh
 }
@@ -146,8 +113,11 @@ versionFunc() {
 
 restartDNS() {
   local svcOption svc str output status pid icon FTL_PID_FILE
+  local ubus=0
   svcOption="${1:-restart}"
 
+  pihole-FTL -vv | grep -qi no-ubus || ubus=1
+
   # get the current path to the pihole-FTL.pid
   FTL_PID_FILE="$(getFTLPIDFile)"
 
@@ -163,6 +133,10 @@ restartDNS() {
       svc="true"
       str="FTL is not running"
       icon="${INFO}"
+    elif [[ "$ubus" -eq 1 ]]; then
+      svc="eval ubus call service signal '{\"name\":\"pihole-FTL\",\"signal\":34}'"
+      str="Reloading DNS lists (UBus)"
+      icon="${TICK}"
     else
       svc="kill -RTMIN ${pid}"
       str="Reloading DNS lists"
@@ -176,6 +150,10 @@ restartDNS() {
       svc="true"
       str="FTL is not running"
       icon="${INFO}"
+    elif [[ "$ubus" -eq 1 ]]; then
+      svc="eval ubus call service signal '{\"name\":\"pihole-FTL\",\"signal\":1}'"
+      str="Flushing DNS cache (UBus)"
+      icon="${TICK}"
     else
       svc="kill -HUP ${pid}"
       str="Flushing DNS cache"
@@ -183,7 +161,7 @@ restartDNS() {
     fi
   else
     # A full restart has been requested
-    svc="service pihole-FTL restart"
+    svc="/etc/init.d/pihole-FTL restart"
     str="Restarting DNS server"
     icon="${TICK}"
   fi
@@ -318,8 +296,8 @@ analyze_ports() {
   # function is getting called
   # Check individual address family/protocol combinations
   # For a healthy Pi-hole, they should all be up (nothing printed)
-  lv4="$(ss --ipv4 --listening --numeric --tcp --udp src :${port})"
-  if grep -q "udp " <<< "${lv4}"; then
+  lv4="$(netstat -tupln | grep -E ":${1}.*pihole-FTL" | grep -v "::")"
+  if grep -Eq "udp " <<< "${lv4}"; then
       echo -e "     ${TICK} UDP (IPv4)"
   else
       echo -e "     ${CROSS} UDP (IPv4)"
@@ -329,7 +307,7 @@ analyze_ports() {
   else
       echo -e "     ${CROSS} TCP (IPv4)"
   fi
-  lv6="$(ss --ipv6 --listening --numeric --tcp --udp src :${port})"
+  lv6="$(netstat -tupln | grep -E ":${1}.*::.*pihole-FTL")"
   if grep -q "udp " <<< "${lv6}"; then
       echo -e "     ${TICK} UDP (IPv6)"
   else
@@ -391,9 +369,13 @@ exit 0
 }
 
 tailFunc() {
-  # Warn user if Pi-hole's logging is disabled
-  local logging_enabled=$(grep -c "^log-queries" /etc/dnsmasq.d/01-pihole.conf)
-  if [[ "${logging_enabled}" == "0" ]]; then
+  local log_fac="$(uci_get dhcp @dnsmasq[0] logfacility)"
+  log_fac=${log_fac:-/var/log/pihole.log}
+
+  [[ -f ${log_fac} ]] || echo "  ${CROSS} Log not found"; exit 0
+
+  local logging_enabled="$(uci_get dhcp @dnsmasq[0] logqueries)"
+  if [[ "${logging_enabled}" != "1" ]]; then
     # No "log-queries" lines are found.
     # Commented out lines (such as "#log-queries") are ignored
     echo "  ${CROSS} Warning: Query logging is disabled"
@@ -404,7 +386,7 @@ tailFunc() {
   # Color blocklist/blacklist/wildcard entries as red
   # Color A/AAAA/DHCP strings as white
   # Color everything else as gray
-  tail -f /var/log/pihole/pihole.log | grep --line-buffered "${1}" | sed -E \
+  tail -f ${log_fac} | grep --line-buffered "${1}" | sed -E \
     -e "s,($(date +'%b %d ')| dnsmasq\[[0-9]*\]),,g" \
     -e "s,(.*(blacklisted |gravity blocked ).*),${COL_RED}&${COL_NC}," \
     -e "s,.*(query\\[A|DHCP).*,${COL_NC}&${COL_NC}," \
@@ -412,59 +394,6 @@ tailFunc() {
   exit 0
 }
 
-piholeCheckoutFunc() {
-  if [ -n "${DOCKER_VERSION}" ]; then
-    unsupportedFunc
-  else
-    if [[ "$2" == "-h" ]] || [[ "$2" == "--help" ]]; then
-      echo "Usage: pihole checkout [repo] [branch]
-  Example: 'pihole checkout master' or 'pihole checkout core dev'
-  Switch Pi-hole subsystems to a different GitHub branch
-
-  Repositories:
-    core [branch]       Change the branch of Pi-hole's core subsystem
-    web [branch]        Change the branch of Web Interface subsystem
-    ftl [branch]        Change the branch of Pi-hole's FTL subsystem
-
-  Branches:
-    master              Update subsystems to the latest stable release
-    dev                 Update subsystems to the latest development release
-    branchname          Update subsystems to the specified branchname"
-      exit 0
-    fi
-
-    source "${PI_HOLE_SCRIPT_DIR}"/piholeCheckout.sh
-    shift
-    checkout "$@"
-  fi
-}
-
-tricorderFunc() {
-  local tricorder_token
-  if [[ ! -p "/dev/stdin" ]]; then
-    echo -e "  ${INFO} Please do not call Tricorder directly"
-    exit 1
-  fi
-
-  tricorder_token=$(curl --silent --fail --show-error --upload-file "-" https://tricorder.pi-hole.net/upload < /dev/stdin 2>&1)
-  if [[ "${tricorder_token}" != "https://tricorder.pi-hole.net/"* ]]; then
-      echo -e "${CROSS} uploading failed, contact Pi-hole support for assistance."
-      # Log curl error (if available)
-      if [ -n "${tricorder_token}" ]; then
-          echo -e "${INFO} Error message: ${COL_RED}${tricorder_token}${COL_NC}\\n"
-          tricorder_token=""
-      fi
-      exit 1
-  fi
-  echo "Upload successful, your token is: ${COL_GREEN}${tricorder_token}${COL_NC}"
-  exit 0
-}
-
-updateCheckFunc() {
-  "${PI_HOLE_SCRIPT_DIR}"/updatecheck.sh "$@"
-  exit 0
-}
-
 unsupportedFunc(){
   echo "Function not supported in Docker images"
   exit 0
@@ -485,11 +414,7 @@ Whitelist/Blacklist Options:
                         Add '-h' for more info on whitelist/blacklist usage
 
 Debugging Options:
-  -d, debug           Start a debugging session
-                        Add '-c' or '--check-database' to include a Pi-hole database integrity check
-                        Add '-a' to automatically upload the log to tricorder.pi-hole.net
   -f, flush           Flush the Pi-hole log
-  -r, reconfigure     Reconfigure or Repair Pi-hole subsystems
   -t, tail [arg]      View the live output of the Pi-hole log.
                       Add an optional argument to filter the log
                       (regular expressions are supported)
@@ -505,10 +430,7 @@ Options:
                         Add '-h' for more info on logging usage
   -q, query           Query the adlists for a specified domain
                         Add '-h' for more info on query usage
-  -up, updatePihole   Update Pi-hole subsystems
-                        Add '--check-only' to exit script before update is performed.
   -v, version         Show installed versions of Pi-hole, Web Interface & FTL
-  uninstall           Uninstall Pi-hole from your system
   status              Display the running status of Pi-hole subsystems
   enable              Enable Pi-hole subsystems
   disable             Disable Pi-hole subsystems
@@ -517,8 +439,6 @@ Options:
   restartdns          Full restart Pi-hole subsystems
                         Add 'reload' to update the lists and flush the cache without restarting the DNS server
                         Add 'reload-lists' to only update the lists WITHOUT flushing the cache or restarting the DNS server
-  checkout            Switch Pi-hole subsystems to a different GitHub branch
-                        Add '-h' for more info on checkout usage
   arpflush            Flush information stored in Pi-hole's network tables";
   exit 0
 }
@@ -528,14 +448,11 @@ if [[ $# = 0 ]]; then
 fi
 
 # functions that do not require sudo power
-need_root=1
 case "${1}" in
   "-h" | "help" | "--help"      ) helpFunc;;
   "-v" | "version"              ) versionFunc;;
-  "-c" | "chronometer"          ) chronometerFunc "$@";;
   "-q" | "query"                ) queryFunc "$@";;
   "status"                      ) statusFunc "$2";;
-  "tricorder"                   ) tricorderFunc;;
 
   # we need to add all arguments that require sudo power to not trigger the * argument
   "-w" | "whitelist"            ) ;;
@@ -545,52 +462,19 @@ case "${1}" in
   "--white-regex" | "white-regex" ) ;;
   "--white-wild" | "white-wild"   ) ;;
   "-f" | "flush"                ) ;;
-  "-up" | "updatePihole"        ) ;;
-  "-r"  | "reconfigure"         ) ;;
   "-l" | "logging"              ) ;;
-  "uninstall"                   ) ;;
   "enable"                      ) ;;
   "disable"                     ) ;;
   "-d" | "debug"                ) ;;
   "restartdns"                  ) ;;
-  "-g" | "updateGravity"        ) need_root=0;;
-  "reloaddns"                   ) need_root=0;;
+  "-g" | "updateGravity"        ) ;;
+  "reloaddns"                   ) ;;
   "setpassword"                 ) ;;
-  "checkout"                    ) ;;
-  "updatechecker"               ) ;;
   "arpflush"                    ) ;;
   "-t" | "tail"                 ) ;;
   *                             ) helpFunc;;
 esac
 
-# Must be root to use this tool for most functions
-if [[ ! $EUID -eq 0 && need_root -eq 1 ]];then
-  if [[ -x "$(command -v sudo)" ]]; then
-    exec sudo bash "$0" "$@"
-    exit $?
-  else
-    echo -e "  ${CROSS} sudo is needed to run pihole commands.  Please run this script as root or install sudo."
-    exit 1
-  fi
-fi
-
-# In the case of alpine running in a container, the USER variable appears to be blank
-# which prevents the next trap from working correctly. Set it by running whoami
-if [[ -z ${USER} ]]; then
-  USER=$(whoami)
-fi
-
-# Can also be user pihole for other functions
-if [[ ${USER} != "pihole" && need_root -eq 0 ]];then
-  if [[ -x "$(command -v sudo)" ]]; then
-    exec sudo -u pihole bash "$0" "$@"
-    exit $?
-  else
-    echo -e "  ${CROSS} sudo is needed to run pihole commands.  Please run this script as root or install sudo."
-    exit 1
-  fi
-fi
-
 # Handle redirecting to specific functions based on arguments
 case "${1}" in
   "-w" | "whitelist"            ) listFunc "$@";;
@@ -601,18 +485,13 @@ case "${1}" in
   "--white-wild" | "white-wild"   ) listFunc "$@";;
   "-d" | "debug"                ) debugFunc "$@";;
   "-f" | "flush"                ) flushFunc "$@";;
-  "-up" | "updatePihole"        ) updatePiholeFunc "$@";;
-  "-r"  | "reconfigure"         ) reconfigurePiholeFunc;;
   "-g" | "updateGravity"        ) updateGravityFunc "$@";;
   "-l" | "logging"              ) piholeLogging "$@";;
-  "uninstall"                   ) uninstallFunc;;
   "enable"                      ) piholeEnable 1;;
   "disable"                     ) piholeEnable 0 "$2";;
   "restartdns"                  ) restartDNS "$2";;
   "reloaddns"                   ) restartDNS "reload";;
   "setpassword"                 ) SetWebPassword "$@";;
-  "checkout"                    ) piholeCheckoutFunc "$@";;
-  "updatechecker"               ) shift; updateCheckFunc "$@";;
   "arpflush"                    ) arpFunc "$@";;
   "-t" | "tail"                 ) tailFunc "$2";;
 esac
